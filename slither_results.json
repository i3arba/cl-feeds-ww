{"success": true, "error": null, "results": {"printers": [{"elements": [], "description": "{\n    \"payable\": {\n        \"IMulticall3\": [\n            \"aggregate((address,bytes)[])\",\n            \"aggregate3((address,bool,bytes)[])\",\n            \"aggregate3Value((address,bool,uint256,bytes)[])\",\n            \"blockAndAggregate((address,bytes)[])\",\n            \"tryAggregate(bool,(address,bytes)[])\",\n            \"tryBlockAndAggregate(bool,(address,bytes)[])\"\n        ],\n        \"CLFExample\": [\n            \"()\"\n        ],\n        \"CryticTester\": [\n            \"constructor()\"\n        ]\n    },\n    \"timestamp\": {\n        \"MockOffchainAggregator\": [\n            \"constructor(uint8,int256)\",\n            \"updateAnswer(int256)\"\n        ],\n        \"ERC20\": [\n            \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\"\n        ],\n        \"MockERC20\": [\n            \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\"\n        ],\n        \"CLFExample\": [\n            \"startWork()\",\n            \"endWork()\",\n            \"endContract()\",\n            \"payEmployee()\"\n        ],\n        \"BaseTests\": [\n            \"sessionStarterHelper()\",\n            \"sessionCloserHelper()\"\n        ],\n        \"CLFExampleTest\": [\n            \"sessionStarterHelper()\",\n            \"sessionCloserHelper()\",\n            \"test_workSessionStart()\",\n            \"test_workSessionEnd()\",\n            \"test_ownerCanPayTheUser()\"\n        ]\n    },\n    \"block_number\": {},\n    \"msg_sender\": {\n        \"Ownable\": [\n            \"renounceOwnership()\",\n            \"transferOwnership(address)\"\n        ],\n        \"ERC20\": [\n            \"approve(address,uint256)\",\n            \"transfer(address,uint256)\",\n            \"transferFrom(address,address,uint256)\"\n        ],\n        \"MockERC20\": [\n            \"approve(address,uint256)\",\n            \"transfer(address,uint256)\",\n            \"transferFrom(address,address,uint256)\"\n        ],\n        \"CLFExample\": [\n            \"renounceOwnership()\",\n            \"transferOwnership(address)\",\n            \"startWork()\",\n            \"endWork()\",\n            \"setRate(uint256)\",\n            \"endContract()\",\n            \"payEmployee()\"\n        ]\n    },\n    \"msg_gas\": {},\n    \"assert\": {\n        \"CryticTester\": {\n            \"cLFExample_endContract()\": [\n                {\n                    \"start\": 1225,\n                    \"length\": 13,\n                    \"filename_relative\": \"lib/chimera/src/CryticAsserts.sol\",\n                    \"filename_absolute\": \"/Users/patrickcarneiro/77IL/77T/cl-feeds-ww/lib/chimera/src/CryticAsserts.sol\",\n                    \"filename_short\": \"lib/chimera/src/CryticAsserts.sol\",\n                    \"is_dependency\": true,\n                    \"lines\": [\n                        47\n                    ],\n                    \"starting_column\": 13,\n                    \"ending_column\": 26\n                }\n            ],\n            \"cLFExample_endWork()\": [\n                {\n                    \"start\": 1225,\n                    \"length\": 13,\n                    \"filename_relative\": \"lib/chimera/src/CryticAsserts.sol\",\n                    \"filename_absolute\": \"/Users/patrickcarneiro/77IL/77T/cl-feeds-ww/lib/chimera/src/CryticAsserts.sol\",\n                    \"filename_short\": \"lib/chimera/src/CryticAsserts.sol\",\n                    \"is_dependency\": true,\n                    \"lines\": [\n                        47\n                    ],\n                    \"starting_column\": 13,\n                    \"ending_column\": 26\n                }\n            ]\n        }\n    },\n    \"constant_functions\": {\n        \"AggregatorV3Interface\": [\n            \"decimals()\",\n            \"description()\",\n            \"version()\",\n            \"getRoundData(uint80)\",\n            \"latestRoundData()\"\n        ],\n        \"MockOffchainAggregator\": [\n            \"getRoundData(uint80)\",\n            \"latestRoundData()\",\n            \"decimals()\",\n            \"latestAnswer()\",\n            \"latestTimestamp()\",\n            \"latestRound()\",\n            \"minAnswer()\",\n            \"maxAnswer()\",\n            \"getAnswer(uint256)\",\n            \"getTimestamp(uint256)\"\n        ],\n        \"MockV3Aggregator\": [\n            \"version()\",\n            \"decimals()\",\n            \"getAnswer(uint256)\",\n            \"getRoundData(uint80)\",\n            \"latestRoundData()\",\n            \"getTimestamp(uint256)\",\n            \"latestAnswer()\",\n            \"latestTimestamp()\",\n            \"latestRound()\",\n            \"description()\",\n            \"version()\",\n            \"aggregator()\",\n            \"proposedAggregator()\"\n        ],\n        \"AggregatorInterface\": [\n            \"latestAnswer()\",\n            \"latestTimestamp()\",\n            \"latestRound()\",\n            \"getAnswer(uint256)\",\n            \"getTimestamp(uint256)\"\n        ],\n        \"AggregatorV2V3Interface\": [\n            \"decimals()\",\n            \"description()\",\n            \"version()\",\n            \"getRoundData(uint80)\",\n            \"latestRoundData()\",\n            \"latestAnswer()\",\n            \"latestTimestamp()\",\n            \"latestRound()\",\n            \"getAnswer(uint256)\",\n            \"getTimestamp(uint256)\"\n        ],\n        \"FoundryAsserts\": [\n            \"excludeArtifacts()\",\n            \"excludeContracts()\",\n            \"excludeSelectors()\",\n            \"excludeSenders()\",\n            \"targetArtifacts()\",\n            \"targetArtifactSelectors()\",\n            \"targetContracts()\",\n            \"targetSelectors()\",\n            \"targetSenders()\",\n            \"targetInterfaces()\",\n            \"failed()\",\n            \"IS_TEST()\"\n        ],\n        \"StdAssertions\": [\n            \"failed()\"\n        ],\n        \"stdError\": [\n            \"assertionError()\",\n            \"arithmeticError()\",\n            \"divisionError()\",\n            \"enumConversionError()\",\n            \"encodeStorageError()\",\n            \"popError()\",\n            \"indexOOBError()\",\n            \"memOverflowError()\",\n            \"zeroVarError()\"\n        ],\n        \"StdInvariant\": [\n            \"excludeArtifacts()\",\n            \"excludeContracts()\",\n            \"excludeSelectors()\",\n            \"excludeSenders()\",\n            \"targetArtifacts()\",\n            \"targetArtifactSelectors()\",\n            \"targetContracts()\",\n            \"targetSelectors()\",\n            \"targetSenders()\",\n            \"targetInterfaces()\"\n        ],\n        \"Test\": [\n            \"excludeArtifacts()\",\n            \"excludeContracts()\",\n            \"excludeSelectors()\",\n            \"excludeSenders()\",\n            \"targetArtifacts()\",\n            \"targetArtifactSelectors()\",\n            \"targetContracts()\",\n            \"targetSelectors()\",\n            \"targetSenders()\",\n            \"targetInterfaces()\",\n            \"failed()\",\n            \"IS_TEST()\"\n        ],\n        \"VmSafe\": [\n            \"deriveKey(string,uint32)\",\n            \"deriveKey(string,string,uint32)\",\n            \"deriveKey(string,uint32,string)\",\n            \"deriveKey(string,string,uint32,string)\",\n            \"publicKeyP256(uint256)\",\n            \"signCompact(uint256,bytes32)\",\n            \"signCompact(bytes32)\",\n            \"signCompact(address,bytes32)\",\n            \"signP256(uint256,bytes32)\",\n            \"sign(uint256,bytes32)\",\n            \"sign(bytes32)\",\n            \"sign(address,bytes32)\",\n            \"envAddress(string)\",\n            \"envAddress(string,string)\",\n            \"envBool(string)\",\n            \"envBool(string,string)\",\n            \"envBytes32(string)\",\n            \"envBytes32(string,string)\",\n            \"envBytes(string)\",\n            \"envBytes(string,string)\",\n            \"envExists(string)\",\n            \"envInt(string)\",\n            \"envInt(string,string)\",\n            \"envOr(string,bool)\",\n            \"envOr(string,uint256)\",\n            \"envOr(string,string,address[])\",\n            \"envOr(string,string,bytes32[])\",\n            \"envOr(string,string,string[])\",\n            \"envOr(string,string,bytes[])\",\n            \"envOr(string,int256)\",\n            \"envOr(string,address)\",\n            \"envOr(string,bytes32)\",\n            \"envOr(string,string)\",\n            \"envOr(string,bytes)\",\n            \"envOr(string,string,bool[])\",\n            \"envOr(string,string,uint256[])\",\n            \"envOr(string,string,int256[])\",\n            \"envString(string)\",\n            \"envString(string,string)\",\n            \"envUint(string)\",\n            \"envUint(string,string)\",\n            \"isContext(uint8)\",\n            \"addr(uint256)\",\n            \"getBlobBaseFee()\",\n            \"getBlockNumber()\",\n            \"getBlockTimestamp()\",\n            \"getNonce(address)\",\n            \"getStateDiff()\",\n            \"getStateDiffJson()\",\n            \"lastCallGas()\",\n            \"load(address,bytes32)\",\n            \"exists(string)\",\n            \"fsMetadata(string)\",\n            \"getArtifactPathByCode(bytes)\",\n            \"getArtifactPathByDeployedCode(bytes)\",\n            \"getBroadcast(string,uint64,uint8)\",\n            \"getBroadcasts(string,uint64,uint8)\",\n            \"getBroadcasts(string,uint64)\",\n            \"getCode(string)\",\n            \"getDeployedCode(string)\",\n            \"getDeployment(string)\",\n            \"getDeployment(string,uint64)\",\n            \"getDeployments(string,uint64)\",\n            \"isDir(string)\",\n            \"isFile(string)\",\n            \"projectRoot()\",\n            \"readDir(string)\",\n            \"readDir(string,uint64)\",\n            \"readDir(string,uint64,bool)\",\n            \"readFile(string)\",\n            \"readFileBinary(string)\",\n            \"readLine(string)\",\n            \"readLink(string)\",\n            \"unixTime()\",\n            \"keyExistsJson(string,string)\",\n            \"parseJsonAddress(string,string)\",\n            \"parseJsonAddressArray(string,string)\",\n            \"parseJsonBool(string,string)\",\n            \"parseJsonBoolArray(string,string)\",\n            \"parseJsonBytes(string,string)\",\n            \"parseJsonBytes32(string,string)\",\n            \"parseJsonBytes32Array(string,string)\",\n            \"parseJsonBytesArray(string,string)\",\n            \"parseJsonInt(string,string)\",\n            \"parseJsonIntArray(string,string)\",\n            \"parseJsonKeys(string,string)\",\n            \"parseJsonString(string,string)\",\n            \"parseJsonStringArray(string,string)\",\n            \"parseJsonTypeArray(string,string,string)\",\n            \"parseJsonType(string,string)\",\n            \"parseJsonType(string,string,string)\",\n            \"parseJsonUint(string,string)\",\n            \"parseJsonUintArray(string,string)\",\n            \"parseJson(string)\",\n            \"parseJson(string,string)\",\n            \"serializeJsonType(string,bytes)\",\n            \"keyExists(string,string)\",\n            \"indexOf(string,string)\",\n            \"parseAddress(string)\",\n            \"parseBool(string)\",\n            \"parseBytes(string)\",\n            \"parseBytes32(string)\",\n            \"parseInt(string)\",\n            \"parseUint(string)\",\n            \"replace(string,string,string)\",\n            \"split(string,string)\",\n            \"toLowercase(string)\",\n            \"toString(address)\",\n            \"toString(bytes)\",\n            \"toString(bytes32)\",\n            \"toString(bool)\",\n            \"toString(uint256)\",\n            \"toString(int256)\",\n            \"toUppercase(string)\",\n            \"trim(string)\",\n            \"assertApproxEqAbsDecimal(uint256,uint256,uint256,uint256)\",\n            \"assertApproxEqAbsDecimal(uint256,uint256,uint256,uint256,string)\",\n            \"assertApproxEqAbsDecimal(int256,int256,uint256,uint256)\",\n            \"assertApproxEqAbsDecimal(int256,int256,uint256,uint256,string)\",\n            \"assertApproxEqAbs(uint256,uint256,uint256)\",\n            \"assertApproxEqAbs(uint256,uint256,uint256,string)\",\n            \"assertApproxEqAbs(int256,int256,uint256)\",\n            \"assertApproxEqAbs(int256,int256,uint256,string)\",\n            \"assertApproxEqRelDecimal(uint256,uint256,uint256,uint256)\",\n            \"assertApproxEqRelDecimal(uint256,uint256,uint256,uint256,string)\",\n            \"assertApproxEqRelDecimal(int256,int256,uint256,uint256)\",\n            \"assertApproxEqRelDecimal(int256,int256,uint256,uint256,string)\",\n            \"assertApproxEqRel(uint256,uint256,uint256)\",\n            \"assertApproxEqRel(uint256,uint256,uint256,string)\",\n            \"assertApproxEqRel(int256,int256,uint256)\",\n            \"assertApproxEqRel(int256,int256,uint256,string)\",\n            \"assertEqDecimal(uint256,uint256,uint256)\",\n            \"assertEqDecimal(uint256,uint256,uint256,string)\",\n            \"assertEqDecimal(int256,int256,uint256)\",\n            \"assertEqDecimal(int256,int256,uint256,string)\",\n            \"assertEq(bool,bool)\",\n            \"assertEq(bool,bool,string)\",\n            \"assertEq(string,string)\",\n            \"assertEq(string,string,string)\",\n            \"assertEq(bytes,bytes)\",\n            \"assertEq(bytes,bytes,string)\",\n            \"assertEq(bool[],bool[])\",\n            \"assertEq(bool[],bool[],string)\",\n            \"assertEq(uint256[],uint256[])\",\n            \"assertEq(uint256[],uint256[],string)\",\n            \"assertEq(int256[],int256[])\",\n            \"assertEq(int256[],int256[],string)\",\n            \"assertEq(uint256,uint256)\",\n            \"assertEq(address[],address[])\",\n            \"assertEq(address[],address[],string)\",\n            \"assertEq(bytes32[],bytes32[])\",\n            \"assertEq(bytes32[],bytes32[],string)\",\n            \"assertEq(string[],string[])\",\n            \"assertEq(string[],string[],string)\",\n            \"assertEq(bytes[],bytes[])\",\n            \"assertEq(bytes[],bytes[],string)\",\n            \"assertEq(uint256,uint256,string)\",\n            \"assertEq(int256,int256)\",\n            \"assertEq(int256,int256,string)\",\n            \"assertEq(address,address)\",\n            \"assertEq(address,address,string)\",\n            \"assertEq(bytes32,bytes32)\",\n            \"assertEq(bytes32,bytes32,string)\",\n            \"assertFalse(bool)\",\n            \"assertFalse(bool,string)\",\n            \"assertGeDecimal(uint256,uint256,uint256)\",\n            \"assertGeDecimal(uint256,uint256,uint256,string)\",\n            \"assertGeDecimal(int256,int256,uint256)\",\n            \"assertGeDecimal(int256,int256,uint256,string)\",\n            \"assertGe(uint256,uint256)\",\n            \"assertGe(uint256,uint256,string)\",\n            \"assertGe(int256,int256)\",\n            \"assertGe(int256,int256,string)\",\n            \"assertGtDecimal(uint256,uint256,uint256)\",\n            \"assertGtDecimal(uint256,uint256,uint256,string)\",\n            \"assertGtDecimal(int256,int256,uint256)\",\n            \"assertGtDecimal(int256,int256,uint256,string)\",\n            \"assertGt(uint256,uint256)\",\n            \"assertGt(uint256,uint256,string)\",\n            \"assertGt(int256,int256)\",\n            \"assertGt(int256,int256,string)\",\n            \"assertLeDecimal(uint256,uint256,uint256)\",\n            \"assertLeDecimal(uint256,uint256,uint256,string)\",\n            \"assertLeDecimal(int256,int256,uint256)\",\n            \"assertLeDecimal(int256,int256,uint256,string)\",\n            \"assertLe(uint256,uint256)\",\n            \"assertLe(uint256,uint256,string)\",\n            \"assertLe(int256,int256)\",\n            \"assertLe(int256,int256,string)\",\n            \"assertLtDecimal(uint256,uint256,uint256)\",\n            \"assertLtDecimal(uint256,uint256,uint256,string)\",\n            \"assertLtDecimal(int256,int256,uint256)\",\n            \"assertLtDecimal(int256,int256,uint256,string)\",\n            \"assertLt(uint256,uint256)\",\n            \"assertLt(uint256,uint256,string)\",\n            \"assertLt(int256,int256)\",\n            \"assertLt(int256,int256,string)\",\n            \"assertNotEqDecimal(uint256,uint256,uint256)\",\n            \"assertNotEqDecimal(uint256,uint256,uint256,string)\",\n            \"assertNotEqDecimal(int256,int256,uint256)\",\n            \"assertNotEqDecimal(int256,int256,uint256,string)\",\n            \"assertNotEq(bool,bool)\",\n            \"assertNotEq(bool,bool,string)\",\n            \"assertNotEq(string,string)\",\n            \"assertNotEq(string,string,string)\",\n            \"assertNotEq(bytes,bytes)\",\n            \"assertNotEq(bytes,bytes,string)\",\n            \"assertNotEq(bool[],bool[])\",\n            \"assertNotEq(bool[],bool[],string)\",\n            \"assertNotEq(uint256[],uint256[])\",\n            \"assertNotEq(uint256[],uint256[],string)\",\n            \"assertNotEq(int256[],int256[])\",\n            \"assertNotEq(int256[],int256[],string)\",\n            \"assertNotEq(uint256,uint256)\",\n            \"assertNotEq(address[],address[])\",\n            \"assertNotEq(address[],address[],string)\",\n            \"assertNotEq(bytes32[],bytes32[])\",\n            \"assertNotEq(bytes32[],bytes32[],string)\",\n            \"assertNotEq(string[],string[])\",\n            \"assertNotEq(string[],string[],string)\",\n            \"assertNotEq(bytes[],bytes[])\",\n            \"assertNotEq(bytes[],bytes[],string)\",\n            \"assertNotEq(uint256,uint256,string)\",\n            \"assertNotEq(int256,int256)\",\n            \"assertNotEq(int256,int256,string)\",\n            \"assertNotEq(address,address)\",\n            \"assertNotEq(address,address,string)\",\n            \"assertNotEq(bytes32,bytes32)\",\n            \"assertNotEq(bytes32,bytes32,string)\",\n            \"assertTrue(bool)\",\n            \"assertTrue(bool,string)\",\n            \"assume(bool)\",\n            \"assumeNoRevert()\",\n            \"assumeNoRevert((address,bool,bytes))\",\n            \"assumeNoRevert((address,bool,bytes)[])\",\n            \"breakpoint(string)\",\n            \"breakpoint(string,bool)\",\n            \"getFoundryVersion()\",\n            \"rpcUrl(string)\",\n            \"rpcUrlStructs()\",\n            \"rpcUrls()\",\n            \"keyExistsToml(string,string)\",\n            \"parseTomlAddress(string,string)\",\n            \"parseTomlAddressArray(string,string)\",\n            \"parseTomlBool(string,string)\",\n            \"parseTomlBoolArray(string,string)\",\n            \"parseTomlBytes(string,string)\",\n            \"parseTomlBytes32(string,string)\",\n            \"parseTomlBytes32Array(string,string)\",\n            \"parseTomlBytesArray(string,string)\",\n            \"parseTomlInt(string,string)\",\n            \"parseTomlIntArray(string,string)\",\n            \"parseTomlKeys(string,string)\",\n            \"parseTomlString(string,string)\",\n            \"parseTomlStringArray(string,string)\",\n            \"parseTomlTypeArray(string,string,string)\",\n            \"parseTomlType(string,string)\",\n            \"parseTomlType(string,string,string)\",\n            \"parseTomlUint(string,string)\",\n            \"parseTomlUintArray(string,string)\",\n            \"parseToml(string)\",\n            \"parseToml(string,string)\",\n            \"computeCreate2Address(bytes32,bytes32,address)\",\n            \"computeCreate2Address(bytes32,bytes32)\",\n            \"computeCreateAddress(address,uint256)\",\n            \"ensNamehash(string)\",\n            \"getLabel(address)\",\n            \"pauseTracing()\",\n            \"randomBool()\",\n            \"randomBytes(uint256)\",\n            \"randomBytes4()\",\n            \"randomBytes8()\",\n            \"randomInt()\",\n            \"randomInt(uint256)\",\n            \"randomUint(uint256)\",\n            \"resumeTracing()\",\n            \"toBase64URL(bytes)\",\n            \"toBase64URL(string)\",\n            \"toBase64(bytes)\",\n            \"toBase64(string)\"\n        ],\n        \"Vm\": [\n            \"deriveKey(string,uint32)\",\n            \"deriveKey(string,string,uint32)\",\n            \"deriveKey(string,uint32,string)\",\n            \"deriveKey(string,string,uint32,string)\",\n            \"publicKeyP256(uint256)\",\n            \"signCompact(uint256,bytes32)\",\n            \"signCompact(bytes32)\",\n            \"signCompact(address,bytes32)\",\n            \"signP256(uint256,bytes32)\",\n            \"sign(uint256,bytes32)\",\n            \"sign(bytes32)\",\n            \"sign(address,bytes32)\",\n            \"envAddress(string)\",\n            \"envAddress(string,string)\",\n            \"envBool(string)\",\n            \"envBool(string,string)\",\n            \"envBytes32(string)\",\n            \"envBytes32(string,string)\",\n            \"envBytes(string)\",\n            \"envBytes(string,string)\",\n            \"envExists(string)\",\n            \"envInt(string)\",\n            \"envInt(string,string)\",\n            \"envOr(string,bool)\",\n            \"envOr(string,uint256)\",\n            \"envOr(string,string,address[])\",\n            \"envOr(string,string,bytes32[])\",\n            \"envOr(string,string,string[])\",\n            \"envOr(string,string,bytes[])\",\n            \"envOr(string,int256)\",\n            \"envOr(string,address)\",\n            \"envOr(string,bytes32)\",\n            \"envOr(string,string)\",\n            \"envOr(string,bytes)\",\n            \"envOr(string,string,bool[])\",\n            \"envOr(string,string,uint256[])\",\n            \"envOr(string,string,int256[])\",\n            \"envString(string)\",\n            \"envString(string,string)\",\n            \"envUint(string)\",\n            \"envUint(string,string)\",\n            \"isContext(uint8)\",\n            \"addr(uint256)\",\n            \"getBlobBaseFee()\",\n            \"getBlockNumber()\",\n            \"getBlockTimestamp()\",\n            \"getNonce(address)\",\n            \"getStateDiff()\",\n            \"getStateDiffJson()\",\n            \"lastCallGas()\",\n            \"load(address,bytes32)\",\n            \"exists(string)\",\n            \"fsMetadata(string)\",\n            \"getArtifactPathByCode(bytes)\",\n            \"getArtifactPathByDeployedCode(bytes)\",\n            \"getBroadcast(string,uint64,uint8)\",\n            \"getBroadcasts(string,uint64,uint8)\",\n            \"getBroadcasts(string,uint64)\",\n            \"getCode(string)\",\n            \"getDeployedCode(string)\",\n            \"getDeployment(string)\",\n            \"getDeployment(string,uint64)\",\n            \"getDeployments(string,uint64)\",\n            \"isDir(string)\",\n            \"isFile(string)\",\n            \"projectRoot()\",\n            \"readDir(string)\",\n            \"readDir(string,uint64)\",\n            \"readDir(string,uint64,bool)\",\n            \"readFile(string)\",\n            \"readFileBinary(string)\",\n            \"readLine(string)\",\n            \"readLink(string)\",\n            \"unixTime()\",\n            \"keyExistsJson(string,string)\",\n            \"parseJsonAddress(string,string)\",\n            \"parseJsonAddressArray(string,string)\",\n            \"parseJsonBool(string,string)\",\n            \"parseJsonBoolArray(string,string)\",\n            \"parseJsonBytes(string,string)\",\n            \"parseJsonBytes32(string,string)\",\n            \"parseJsonBytes32Array(string,string)\",\n            \"parseJsonBytesArray(string,string)\",\n            \"parseJsonInt(string,string)\",\n            \"parseJsonIntArray(string,string)\",\n            \"parseJsonKeys(string,string)\",\n            \"parseJsonString(string,string)\",\n            \"parseJsonStringArray(string,string)\",\n            \"parseJsonTypeArray(string,string,string)\",\n            \"parseJsonType(string,string)\",\n            \"parseJsonType(string,string,string)\",\n            \"parseJsonUint(string,string)\",\n            \"parseJsonUintArray(string,string)\",\n            \"parseJson(string)\",\n            \"parseJson(string,string)\",\n            \"serializeJsonType(string,bytes)\",\n            \"keyExists(string,string)\",\n            \"indexOf(string,string)\",\n            \"parseAddress(string)\",\n            \"parseBool(string)\",\n            \"parseBytes(string)\",\n            \"parseBytes32(string)\",\n            \"parseInt(string)\",\n            \"parseUint(string)\",\n            \"replace(string,string,string)\",\n            \"split(string,string)\",\n            \"toLowercase(string)\",\n            \"toString(address)\",\n            \"toString(bytes)\",\n            \"toString(bytes32)\",\n            \"toString(bool)\",\n            \"toString(uint256)\",\n            \"toString(int256)\",\n            \"toUppercase(string)\",\n            \"trim(string)\",\n            \"assertApproxEqAbsDecimal(uint256,uint256,uint256,uint256)\",\n            \"assertApproxEqAbsDecimal(uint256,uint256,uint256,uint256,string)\",\n            \"assertApproxEqAbsDecimal(int256,int256,uint256,uint256)\",\n            \"assertApproxEqAbsDecimal(int256,int256,uint256,uint256,string)\",\n            \"assertApproxEqAbs(uint256,uint256,uint256)\",\n            \"assertApproxEqAbs(uint256,uint256,uint256,string)\",\n            \"assertApproxEqAbs(int256,int256,uint256)\",\n            \"assertApproxEqAbs(int256,int256,uint256,string)\",\n            \"assertApproxEqRelDecimal(uint256,uint256,uint256,uint256)\",\n            \"assertApproxEqRelDecimal(uint256,uint256,uint256,uint256,string)\",\n            \"assertApproxEqRelDecimal(int256,int256,uint256,uint256)\",\n            \"assertApproxEqRelDecimal(int256,int256,uint256,uint256,string)\",\n            \"assertApproxEqRel(uint256,uint256,uint256)\",\n            \"assertApproxEqRel(uint256,uint256,uint256,string)\",\n            \"assertApproxEqRel(int256,int256,uint256)\",\n            \"assertApproxEqRel(int256,int256,uint256,string)\",\n            \"assertEqDecimal(uint256,uint256,uint256)\",\n            \"assertEqDecimal(uint256,uint256,uint256,string)\",\n            \"assertEqDecimal(int256,int256,uint256)\",\n            \"assertEqDecimal(int256,int256,uint256,string)\",\n            \"assertEq(bool,bool)\",\n            \"assertEq(bool,bool,string)\",\n            \"assertEq(string,string)\",\n            \"assertEq(string,string,string)\",\n            \"assertEq(bytes,bytes)\",\n            \"assertEq(bytes,bytes,string)\",\n            \"assertEq(bool[],bool[])\",\n            \"assertEq(bool[],bool[],string)\",\n            \"assertEq(uint256[],uint256[])\",\n            \"assertEq(uint256[],uint256[],string)\",\n            \"assertEq(int256[],int256[])\",\n            \"assertEq(int256[],int256[],string)\",\n            \"assertEq(uint256,uint256)\",\n            \"assertEq(address[],address[])\",\n            \"assertEq(address[],address[],string)\",\n            \"assertEq(bytes32[],bytes32[])\",\n            \"assertEq(bytes32[],bytes32[],string)\",\n            \"assertEq(string[],string[])\",\n            \"assertEq(string[],string[],string)\",\n            \"assertEq(bytes[],bytes[])\",\n            \"assertEq(bytes[],bytes[],string)\",\n            \"assertEq(uint256,uint256,string)\",\n            \"assertEq(int256,int256)\",\n            \"assertEq(int256,int256,string)\",\n            \"assertEq(address,address)\",\n            \"assertEq(address,address,string)\",\n            \"assertEq(bytes32,bytes32)\",\n            \"assertEq(bytes32,bytes32,string)\",\n            \"assertFalse(bool)\",\n            \"assertFalse(bool,string)\",\n            \"assertGeDecimal(uint256,uint256,uint256)\",\n            \"assertGeDecimal(uint256,uint256,uint256,string)\",\n            \"assertGeDecimal(int256,int256,uint256)\",\n            \"assertGeDecimal(int256,int256,uint256,string)\",\n            \"assertGe(uint256,uint256)\",\n            \"assertGe(uint256,uint256,string)\",\n            \"assertGe(int256,int256)\",\n            \"assertGe(int256,int256,string)\",\n            \"assertGtDecimal(uint256,uint256,uint256)\",\n            \"assertGtDecimal(uint256,uint256,uint256,string)\",\n            \"assertGtDecimal(int256,int256,uint256)\",\n            \"assertGtDecimal(int256,int256,uint256,string)\",\n            \"assertGt(uint256,uint256)\",\n            \"assertGt(uint256,uint256,string)\",\n            \"assertGt(int256,int256)\",\n            \"assertGt(int256,int256,string)\",\n            \"assertLeDecimal(uint256,uint256,uint256)\",\n            \"assertLeDecimal(uint256,uint256,uint256,string)\",\n            \"assertLeDecimal(int256,int256,uint256)\",\n            \"assertLeDecimal(int256,int256,uint256,string)\",\n            \"assertLe(uint256,uint256)\",\n            \"assertLe(uint256,uint256,string)\",\n            \"assertLe(int256,int256)\",\n            \"assertLe(int256,int256,string)\",\n            \"assertLtDecimal(uint256,uint256,uint256)\",\n            \"assertLtDecimal(uint256,uint256,uint256,string)\",\n            \"assertLtDecimal(int256,int256,uint256)\",\n            \"assertLtDecimal(int256,int256,uint256,string)\",\n            \"assertLt(uint256,uint256)\",\n            \"assertLt(uint256,uint256,string)\",\n            \"assertLt(int256,int256)\",\n            \"assertLt(int256,int256,string)\",\n            \"assertNotEqDecimal(uint256,uint256,uint256)\",\n            \"assertNotEqDecimal(uint256,uint256,uint256,string)\",\n            \"assertNotEqDecimal(int256,int256,uint256)\",\n            \"assertNotEqDecimal(int256,int256,uint256,string)\",\n            \"assertNotEq(bool,bool)\",\n            \"assertNotEq(bool,bool,string)\",\n            \"assertNotEq(string,string)\",\n            \"assertNotEq(string,string,string)\",\n            \"assertNotEq(bytes,bytes)\",\n            \"assertNotEq(bytes,bytes,string)\",\n            \"assertNotEq(bool[],bool[])\",\n            \"assertNotEq(bool[],bool[],string)\",\n            \"assertNotEq(uint256[],uint256[])\",\n            \"assertNotEq(uint256[],uint256[],string)\",\n            \"assertNotEq(int256[],int256[])\",\n            \"assertNotEq(int256[],int256[],string)\",\n            \"assertNotEq(uint256,uint256)\",\n            \"assertNotEq(address[],address[])\",\n            \"assertNotEq(address[],address[],string)\",\n            \"assertNotEq(bytes32[],bytes32[])\",\n            \"assertNotEq(bytes32[],bytes32[],string)\",\n            \"assertNotEq(string[],string[])\",\n            \"assertNotEq(string[],string[],string)\",\n            \"assertNotEq(bytes[],bytes[])\",\n            \"assertNotEq(bytes[],bytes[],string)\",\n            \"assertNotEq(uint256,uint256,string)\",\n            \"assertNotEq(int256,int256)\",\n            \"assertNotEq(int256,int256,string)\",\n            \"assertNotEq(address,address)\",\n            \"assertNotEq(address,address,string)\",\n            \"assertNotEq(bytes32,bytes32)\",\n            \"assertNotEq(bytes32,bytes32,string)\",\n            \"assertTrue(bool)\",\n            \"assertTrue(bool,string)\",\n            \"assume(bool)\",\n            \"assumeNoRevert()\",\n            \"assumeNoRevert((address,bool,bytes))\",\n            \"assumeNoRevert((address,bool,bytes)[])\",\n            \"breakpoint(string)\",\n            \"breakpoint(string,bool)\",\n            \"getFoundryVersion()\",\n            \"rpcUrl(string)\",\n            \"rpcUrlStructs()\",\n            \"rpcUrls()\",\n            \"keyExistsToml(string,string)\",\n            \"parseTomlAddress(string,string)\",\n            \"parseTomlAddressArray(string,string)\",\n            \"parseTomlBool(string,string)\",\n            \"parseTomlBoolArray(string,string)\",\n            \"parseTomlBytes(string,string)\",\n            \"parseTomlBytes32(string,string)\",\n            \"parseTomlBytes32Array(string,string)\",\n            \"parseTomlBytesArray(string,string)\",\n            \"parseTomlInt(string,string)\",\n            \"parseTomlIntArray(string,string)\",\n            \"parseTomlKeys(string,string)\",\n            \"parseTomlString(string,string)\",\n            \"parseTomlStringArray(string,string)\",\n            \"parseTomlTypeArray(string,string,string)\",\n            \"parseTomlType(string,string)\",\n            \"parseTomlType(string,string,string)\",\n            \"parseTomlUint(string,string)\",\n            \"parseTomlUintArray(string,string)\",\n            \"parseToml(string)\",\n            \"parseToml(string,string)\",\n            \"computeCreate2Address(bytes32,bytes32,address)\",\n            \"computeCreate2Address(bytes32,bytes32)\",\n            \"computeCreateAddress(address,uint256)\",\n            \"ensNamehash(string)\",\n            \"getLabel(address)\",\n            \"pauseTracing()\",\n            \"randomBool()\",\n            \"randomBytes(uint256)\",\n            \"randomBytes4()\",\n            \"randomBytes8()\",\n            \"randomInt()\",\n            \"randomInt(uint256)\",\n            \"randomUint(uint256)\",\n            \"resumeTracing()\",\n            \"toBase64URL(bytes)\",\n            \"toBase64URL(string)\",\n            \"toBase64(bytes)\",\n            \"toBase64(string)\",\n            \"activeFork()\",\n            \"getBlobhashes()\",\n            \"isPersistent(address)\"\n        ],\n        \"IMulticall3\": [\n            \"getBasefee()\",\n            \"getBlockHash(uint256)\",\n            \"getBlockNumber()\",\n            \"getChainId()\",\n            \"getCurrentBlockCoinbase()\",\n            \"getCurrentBlockDifficulty()\",\n            \"getCurrentBlockGasLimit()\",\n            \"getCurrentBlockTimestamp()\",\n            \"getEthBalance(address)\",\n            \"getLastBlockHash()\"\n        ],\n        \"Ownable\": [\n            \"owner()\"\n        ],\n        \"ERC20\": [\n            \"DOMAIN_SEPARATOR()\",\n            \"name()\",\n            \"symbol()\",\n            \"decimals()\",\n            \"totalSupply()\",\n            \"balanceOf(address)\",\n            \"allowance(address,address)\",\n            \"nonces(address)\"\n        ],\n        \"MockERC20\": [\n            \"DOMAIN_SEPARATOR()\",\n            \"name()\",\n            \"symbol()\",\n            \"decimals()\",\n            \"totalSupply()\",\n            \"balanceOf(address)\",\n            \"allowance(address,address)\",\n            \"nonces(address)\"\n        ],\n        \"CLFExample\": [\n            \"owner()\",\n            \"MIN_RATE()\",\n            \"PRECISION_HELPER()\",\n            \"s_rate()\",\n            \"s_unpaidWorkTime()\"\n        ],\n        \"BaseTests\": [\n            \"excludeArtifacts()\",\n            \"excludeContracts()\",\n            \"excludeSelectors()\",\n            \"excludeSenders()\",\n            \"targetArtifacts()\",\n            \"targetArtifactSelectors()\",\n            \"targetContracts()\",\n            \"targetSelectors()\",\n            \"targetSenders()\",\n            \"targetInterfaces()\",\n            \"failed()\",\n            \"calculationHelper()\",\n            \"IS_TEST()\",\n            \"s_example()\",\n            \"s_aggregator()\"\n        ],\n        \"CLFExampleTest\": [\n            \"calculationHelper()\",\n            \"excludeArtifacts()\",\n            \"excludeContracts()\",\n            \"excludeSelectors()\",\n            \"excludeSenders()\",\n            \"targetArtifacts()\",\n            \"targetArtifactSelectors()\",\n            \"targetContracts()\",\n            \"targetSelectors()\",\n            \"targetSenders()\",\n            \"targetInterfaces()\",\n            \"failed()\",\n            \"IS_TEST()\",\n            \"s_example()\",\n            \"s_aggregator()\"\n        ],\n        \"CryticToFoundry\": [\n            \"excludeArtifacts()\",\n            \"excludeContracts()\",\n            \"excludeSelectors()\",\n            \"excludeSenders()\",\n            \"targetArtifacts()\",\n            \"targetArtifactSelectors()\",\n            \"targetContracts()\",\n            \"targetSelectors()\",\n            \"targetSenders()\",\n            \"targetInterfaces()\",\n            \"failed()\",\n            \"test_crytic()\",\n            \"IS_TEST()\"\n        ]\n    },\n    \"constants_used\": {\n        \"MockOffchainAggregator\": {\n            \"constructor(uint8,int256)\": [\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"int192\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"95780971304118053647396689196894323976171195136475135\",\n                        \"type\": \"int192\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"updateAnswer(int256)\": [\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"updateMinAndMaxAnswers(int192,int192)\": [\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"int192\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"95780971304118053647396689196894323976171195136475135\",\n                        \"type\": \"int192\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"minAnswer is too low\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"minAnswer must be less than maxAnswer\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"maxAnswer is too high\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ]\n        },\n        \"MockV3Aggregator\": {\n            \"constructor(uint8,int256)\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"proposeAggregator(address)\": [\n                [\n                    {\n                        \"value\": \"Proposed aggregator cannot be current aggregator\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Proposed aggregator cannot be zero address\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"confirmAggregator(address)\": [\n                [\n                    {\n                        \"value\": \"Invalid proposed aggregator\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"description()\": [\n                [\n                    {\n                        \"value\": \"src/data-feeds/MockV3Aggregator.sol\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ]\n        },\n        \"FoundryAsserts\": {\n            \"failed()\": [\n                [\n                    {\n                        \"value\": \"failed\",\n                        \"type\": \"bytes32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"bytes32\"\n                    }\n                ]\n            ]\n        },\n        \"StdAssertions\": {\n            \"failed()\": [\n                [\n                    {\n                        \"value\": \"failed\",\n                        \"type\": \"bytes32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"bytes32\"\n                    }\n                ]\n            ]\n        },\n        \"Test\": {\n            \"failed()\": [\n                [\n                    {\n                        \"value\": \"failed\",\n                        \"type\": \"bytes32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"bytes32\"\n                    }\n                ]\n            ]\n        },\n        \"Ownable\": {\n            \"renounceOwnership()\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"transferOwnership(address)\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ]\n        },\n        \"ERC20\": {\n            \"approve(address,uint256)\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"transfer(address,uint256)\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"transferFrom(address,address,uint256)\": [\n                [\n                    {\n                        \"value\": \"115792089237316195423570985008687907853269984665640564039457584007913129639935\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\": [\n                [\n                    {\n                        \"value\": \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"PERMIT_DEADLINE_EXPIRED\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"INVALID_SIGNER\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"\\u0019\\u0001\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"DOMAIN_SEPARATOR()\": [\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ]\n        },\n        \"MockERC20\": {\n            \"approve(address,uint256)\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"transfer(address,uint256)\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"transferFrom(address,address,uint256)\": [\n                [\n                    {\n                        \"value\": \"115792089237316195423570985008687907853269984665640564039457584007913129639935\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\": [\n                [\n                    {\n                        \"value\": \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"PERMIT_DEADLINE_EXPIRED\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"INVALID_SIGNER\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"\\u0019\\u0001\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"DOMAIN_SEPARATOR()\": [\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"constructor(string,string,uint8)\": [\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"mint(address,uint256)\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"burn(address,uint256)\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ]\n        },\n        \"CLFExample\": {\n            \"renounceOwnership()\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"transferOwnership(address)\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"constructor(address,address,address)\": [\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"startWork()\": [\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"endWork()\": [\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"setRate(uint256)\": [\n                [\n                    {\n                        \"value\": \"750000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"endContract()\": [\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"payEmployee()\": [\n                [\n                    {\n                        \"value\": \"3600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ]\n        },\n        \"BaseTests\": {\n            \"failed()\": [\n                [\n                    {\n                        \"value\": \"failed\",\n                        \"type\": \"bytes32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"bytes32\"\n                    }\n                ]\n            ],\n            \"setUp()\": [\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8\",\n                        \"type\": \"uint8\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"77\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"250000000000\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"TEST CONTRACT\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"sessionStarterHelper()\": [\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"sessionCloserHelper()\": [\n                [\n                    {\n                        \"value\": \"3600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"calculationHelper()\": [\n                [\n                    {\n                        \"value\": \"250000000000\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"250000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3600\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ]\n        },\n        \"CLFExampleTest\": {\n            \"setUp()\": [\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8\",\n                        \"type\": \"uint8\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"77\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"250000000000\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"TEST CONTRACT\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"sessionStarterHelper()\": [\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"sessionCloserHelper()\": [\n                [\n                    {\n                        \"value\": \"3600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"calculationHelper()\": [\n                [\n                    {\n                        \"value\": \"250000000000\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"250000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3600\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"failed()\": [\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"failed\",\n                        \"type\": \"bytes32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"bytes32\"\n                    }\n                ]\n            ],\n            \"test_workSessionRevert()\": [\n                [\n                    {\n                        \"value\": \"3071222780\",\n                        \"type\": \"bytes4\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"test_workSessionStart()\": [\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"test_workSessionEnd()\": [\n                [\n                    {\n                        \"value\": \"3600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"test_ownerCanPayTheUser()\": [\n                [\n                    {\n                        \"value\": \"Expected Amount To be Paid:\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Employee Balance After Payment:\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"77\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"250000000000\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"250000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"log(string,uint256)\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ]\n        },\n        \"CryticTester\": {\n            \"add_new_asset(uint8)\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"TST\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Test Token\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"asset_approve(address,uint128)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"asset_mint(address,uint128)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"cLFExample_endContract()\": [\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"cLFExample_endContract\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"cLFExample_endWork()\": [\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"cLFExample_endWork\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"cLFExample_payEmployee()\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"cLFExample_renounceOwnership()\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"cLFExample_setRate(uint256)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"cLFExample_startWork()\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"cLFExample_transferOwnership(address)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"constructor()\": [\n                [\n                    {\n                        \"value\": \"2000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ]\n        },\n        \"CryticToFoundry\": {\n            \"failed()\": [\n                [\n                    {\n                        \"value\": \"failed\",\n                        \"type\": \"bytes32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"bytes32\"\n                    }\n                ]\n            ],\n            \"add_new_asset(uint8)\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"TST\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Test Token\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"asset_approve(address,uint128)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"asset_mint(address,uint128)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"cLFExample_endContract()\": [\n                [\n                    {\n                        \"value\": \"cLFExample_endContract\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"cLFExample_endWork()\": [\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"cLFExample_endWork\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"cLFExample_payEmployee()\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"cLFExample_renounceOwnership()\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"cLFExample_setRate(uint256)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"cLFExample_startWork()\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"cLFExample_transferOwnership(address)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"setUp()\": [\n                [\n                    {\n                        \"value\": \"2000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ]\n        },\n        \"TargetFunctions\": {\n            \"add_new_asset(uint8)\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"TST\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Test Token\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"asset_approve(address,uint128)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"asset_mint(address,uint128)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"cLFExample_endContract()\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"cLFExample_endContract\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"cLFExample_endWork()\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"cLFExample_endWork\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"cLFExample_payEmployee()\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"cLFExample_renounceOwnership()\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"cLFExample_setRate(uint256)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"cLFExample_startWork()\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"cLFExample_transferOwnership(address)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ]\n        },\n        \"CLFExampleTargets\": {\n            \"cLFExample_endContract()\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"cLFExample_endContract\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"cLFExample_endWork()\": [\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"cLFExample_endWork\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"cLFExample_payEmployee()\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"cLFExample_renounceOwnership()\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"cLFExample_setRate(uint256)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"cLFExample_startWork()\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"cLFExample_transferOwnership(address)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ]\n        },\n        \"ManagersTargets\": {\n            \"add_new_asset(uint8)\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"TST\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Test Token\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"asset_approve(address,uint128)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"asset_mint(address,uint128)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ]\n        }\n    },\n    \"constants_used_in_binary\": {\n        \"MockOffchainAggregator\": {\n            \"constructor(uint8,int256)\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"updateAnswer(int256)\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"ERC20\": {\n            \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"MockERC20\": {\n            \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"CLFExample\": {\n            \"endContract()\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LESS_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"3600\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"payEmployee()\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LESS_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"3600\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"CLFExampleTest\": {\n            \"test_workSessionEnd()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"3600\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"CryticTester\": {\n            \"add_new_asset(uint8)\": {\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"CryticToFoundry\": {\n            \"add_new_asset(uint8)\": {\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"TargetFunctions\": {\n            \"add_new_asset(uint8)\": {\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"ManagersTargets\": {\n            \"add_new_asset(uint8)\": {\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        }\n    },\n    \"functions_relations\": {\n        \"AggregatorV3Interface\": {\n            \"decimals()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"description()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"version()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getRoundData(uint80)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"latestRoundData()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"MockOffchainAggregator\": {\n            \"constructor(uint8,int256)\": {\n                \"impacts\": [\n                    \"constructor(uint8,int256)\",\n                    \"updateAnswer(int256)\",\n                    \"updateRoundData(uint80,int256,uint256,uint256)\",\n                    \"getRoundData(uint80)\",\n                    \"latestRoundData()\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor(uint8,int256)\",\n                    \"updateAnswer(int256)\",\n                    \"updateRoundData(uint80,int256,uint256,uint256)\"\n                ]\n            },\n            \"updateAnswer(int256)\": {\n                \"impacts\": [\n                    \"constructor(uint8,int256)\",\n                    \"updateAnswer(int256)\",\n                    \"updateRoundData(uint80,int256,uint256,uint256)\",\n                    \"getRoundData(uint80)\",\n                    \"latestRoundData()\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor(uint8,int256)\",\n                    \"updateAnswer(int256)\",\n                    \"updateRoundData(uint80,int256,uint256,uint256)\"\n                ]\n            },\n            \"updateRoundData(uint80,int256,uint256,uint256)\": {\n                \"impacts\": [\n                    \"constructor(uint8,int256)\",\n                    \"updateAnswer(int256)\",\n                    \"updateRoundData(uint80,int256,uint256,uint256)\",\n                    \"getRoundData(uint80)\",\n                    \"latestRoundData()\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor(uint8,int256)\",\n                    \"updateAnswer(int256)\",\n                    \"updateRoundData(uint80,int256,uint256,uint256)\"\n                ]\n            },\n            \"getRoundData(uint80)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor(uint8,int256)\",\n                    \"updateAnswer(int256)\",\n                    \"updateRoundData(uint80,int256,uint256,uint256)\"\n                ]\n            },\n            \"latestRoundData()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor(uint8,int256)\",\n                    \"updateAnswer(int256)\",\n                    \"updateRoundData(uint80,int256,uint256,uint256)\"\n                ]\n            },\n            \"updateMinAndMaxAnswers(int192,int192)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"MockV3Aggregator\": {\n            \"version()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"constructor(uint8,int256)\": {\n                \"impacts\": [\n                    \"decimals()\",\n                    \"getAnswer(uint256)\",\n                    \"getRoundData(uint80)\",\n                    \"latestRoundData()\",\n                    \"getTimestamp(uint256)\",\n                    \"latestAnswer()\",\n                    \"latestTimestamp()\",\n                    \"latestRound()\",\n                    \"updateAnswer(int256)\",\n                    \"updateRoundData(uint80,int256,uint256,uint256)\",\n                    \"proposeAggregator(address)\",\n                    \"confirmAggregator(address)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"decimals()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor(uint8,int256)\",\n                    \"confirmAggregator(address)\"\n                ]\n            },\n            \"getAnswer(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor(uint8,int256)\",\n                    \"confirmAggregator(address)\"\n                ]\n            },\n            \"getRoundData(uint80)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor(uint8,int256)\",\n                    \"confirmAggregator(address)\"\n                ]\n            },\n            \"latestRoundData()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor(uint8,int256)\",\n                    \"confirmAggregator(address)\"\n                ]\n            },\n            \"getTimestamp(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor(uint8,int256)\",\n                    \"confirmAggregator(address)\"\n                ]\n            },\n            \"latestAnswer()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor(uint8,int256)\",\n                    \"confirmAggregator(address)\"\n                ]\n            },\n            \"latestTimestamp()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor(uint8,int256)\",\n                    \"confirmAggregator(address)\"\n                ]\n            },\n            \"latestRound()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor(uint8,int256)\",\n                    \"confirmAggregator(address)\"\n                ]\n            },\n            \"updateAnswer(int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor(uint8,int256)\",\n                    \"confirmAggregator(address)\"\n                ]\n            },\n            \"updateRoundData(uint80,int256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor(uint8,int256)\",\n                    \"confirmAggregator(address)\"\n                ]\n            },\n            \"proposeAggregator(address)\": {\n                \"impacts\": [\n                    \"confirmAggregator(address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor(uint8,int256)\",\n                    \"confirmAggregator(address)\"\n                ]\n            },\n            \"confirmAggregator(address)\": {\n                \"impacts\": [\n                    \"decimals()\",\n                    \"getAnswer(uint256)\",\n                    \"getRoundData(uint80)\",\n                    \"latestRoundData()\",\n                    \"getTimestamp(uint256)\",\n                    \"latestAnswer()\",\n                    \"latestTimestamp()\",\n                    \"latestRound()\",\n                    \"updateAnswer(int256)\",\n                    \"updateRoundData(uint80,int256,uint256,uint256)\",\n                    \"proposeAggregator(address)\",\n                    \"confirmAggregator(address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor(uint8,int256)\",\n                    \"proposeAggregator(address)\",\n                    \"confirmAggregator(address)\"\n                ]\n            },\n            \"description()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"AggregatorInterface\": {\n            \"latestAnswer()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"latestTimestamp()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"latestRound()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getAnswer(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getTimestamp(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"AggregatorV2V3Interface\": {\n            \"decimals()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"description()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"version()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getRoundData(uint80)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"latestRoundData()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"latestAnswer()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"latestTimestamp()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"latestRound()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getAnswer(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getTimestamp(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"Asserts\": {},\n        \"BaseProperties\": {},\n        \"BaseSetup\": {},\n        \"BaseTargetFunctions\": {},\n        \"CryticAsserts\": {},\n        \"FoundryAsserts\": {\n            \"excludeArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifactSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetInterfaces()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"failed()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"IHevm\": {\n            \"warp(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"roll(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assume(bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deal(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"load(address,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"store(address,bytes32,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"sign(uint256,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"addr(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"ffi(string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"prank(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startPrank(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopPrank()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createFork(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"selectFork(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"activeFork()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"label(address,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"etch(address,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"CommonBase\": {},\n        \"TestBase\": {},\n        \"ScriptBase\": {},\n        \"StdAssertions\": {\n            \"failed()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"StdChains\": {},\n        \"StdCheatsSafe\": {},\n        \"StdCheats\": {},\n        \"stdError\": {},\n        \"StdInvariant\": {\n            \"excludeArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifactSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetInterfaces()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"stdJson\": {},\n        \"stdMath\": {},\n        \"stdStorageSafe\": {},\n        \"stdStorage\": {},\n        \"StdStyle\": {},\n        \"stdToml\": {},\n        \"StdUtils\": {},\n        \"Test\": {\n            \"excludeArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifactSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetInterfaces()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"failed()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"VmSafe\": {\n            \"createWallet(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createWallet(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createWallet(uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deriveKey(string,uint32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deriveKey(string,string,uint32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deriveKey(string,uint32,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deriveKey(string,string,uint32,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"publicKeyP256(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rememberKey(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rememberKeys(string,string,uint32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rememberKeys(string,string,string,uint32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signCompact((address,uint256,uint256,uint256),bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signCompact(uint256,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signCompact(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signCompact(address,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signP256(uint256,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"sign((address,uint256,uint256,uint256),bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"sign(uint256,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"sign(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"sign(address,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envAddress(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envAddress(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBool(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBool(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBytes32(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBytes32(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBytes(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBytes(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envExists(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envInt(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envInt(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,bool[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,int256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envString(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envString(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envUint(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envUint(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"isContext(uint8)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setEnv(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"accesses(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"addr(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"eth_getLogs(uint256,uint256,address,bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBlobBaseFee()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBlockNumber()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBlockTimestamp()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getMappingKeyAndParentOf(address,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getMappingLength(address,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getMappingSlotAt(address,bytes32,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getNonce(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getNonce((address,uint256,uint256,uint256))\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getRecordedLogs()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getStateDiff()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getStateDiffJson()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"lastCallGas()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"load(address,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"pauseGasMetering()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"record()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"recordLogs()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"resetGasMetering()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"resumeGasMetering()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rpc(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rpc(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startDebugTraceRecording()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startMappingRecording()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startStateDiffRecording()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopAndReturnDebugTraceRecording()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopAndReturnStateDiff()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopMappingRecording()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"closeFile(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"copyFile(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createDir(string,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deployCode(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deployCode(string,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"exists(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"ffi(string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"fsMetadata(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getArtifactPathByCode(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getArtifactPathByDeployedCode(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBroadcast(string,uint64,uint8)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBroadcasts(string,uint64,uint8)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBroadcasts(string,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getCode(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getDeployedCode(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getDeployment(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getDeployment(string,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getDeployments(string,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"isDir(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"isFile(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"projectRoot()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"prompt(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"promptAddress(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"promptSecret(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"promptSecretUint(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"promptUint(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readDir(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readDir(string,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readDir(string,uint64,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readFile(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readFileBinary(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readLine(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readLink(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"removeDir(string,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"removeFile(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"tryFfi(string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"unixTime()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeFile(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeFileBinary(string,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeLine(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"keyExistsJson(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonAddress(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonAddressArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBool(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBoolArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBytes(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBytes32(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBytes32Array(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBytesArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonInt(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonIntArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonKeys(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonString(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonStringArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonTypeArray(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonType(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonType(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonUint(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonUintArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJson(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJson(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeAddress(string,string,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeAddress(string,string,address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBool(string,string,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBool(string,string,bool[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBytes32(string,string,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBytes32(string,string,bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBytes(string,string,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBytes(string,string,bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeInt(string,string,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeInt(string,string,int256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeJson(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeJsonType(string,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeJsonType(string,string,string,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeString(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeString(string,string,string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeUintToHex(string,string,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeUint(string,string,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeUint(string,string,uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeJson(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeJson(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"keyExists(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"attachDelegation((uint8,bytes32,bytes32,uint64,address))\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"broadcastRawTransaction(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"broadcast()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"broadcast(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"broadcast(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getWallets()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signAndAttachDelegation(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signDelegation(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startBroadcast()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startBroadcast(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startBroadcast(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopBroadcast()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"contains(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"indexOf(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseAddress(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseBool(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseBytes(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseBytes32(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseInt(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseUint(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"replace(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"split(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toLowercase(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toUppercase(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"trim(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbsDecimal(uint256,uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbsDecimal(uint256,uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbsDecimal(int256,int256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbsDecimal(int256,int256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbs(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbs(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbs(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbs(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRelDecimal(uint256,uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRelDecimal(uint256,uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRelDecimal(int256,int256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRelDecimal(int256,int256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRel(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRel(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRel(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRel(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEqDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEqDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEqDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEqDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bool,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bool,bool,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes,bytes,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bool[],bool[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bool[],bool[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(uint256[],uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(uint256[],uint256[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(int256[],int256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(int256[],int256[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(address[],address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(address[],address[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes32[],bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes32[],bytes32[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(string[],string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(string[],string[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes[],bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes[],bytes[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(address,address,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes32,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes32,bytes32,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertFalse(bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertFalse(bool,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGeDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGeDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGeDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGeDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGe(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGe(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGe(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGe(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGtDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGtDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGtDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGtDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGt(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGt(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGt(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGt(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLeDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLeDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLeDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLeDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLe(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLe(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLe(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLe(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLtDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLtDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLtDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLtDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLt(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLt(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLt(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLt(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEqDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEqDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEqDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEqDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bool,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bool,bool,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes,bytes,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bool[],bool[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bool[],bool[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(uint256[],uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(uint256[],uint256[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(int256[],int256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(int256[],int256[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(address[],address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(address[],address[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes32[],bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes32[],bytes32[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(string[],string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(string[],string[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes[],bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes[],bytes[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(address,address,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes32,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes32,bytes32,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertTrue(bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertTrue(bool,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assume(bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assumeNoRevert()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assumeNoRevert((address,bool,bytes))\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assumeNoRevert((address,bool,bytes)[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"breakpoint(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"breakpoint(string,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getFoundryVersion()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rpcUrl(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rpcUrlStructs()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rpcUrls()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"sleep(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"keyExistsToml(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlAddress(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlAddressArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBool(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBoolArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBytes(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBytes32(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBytes32Array(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBytesArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlInt(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlIntArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlKeys(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlString(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlStringArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlTypeArray(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlType(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlType(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlUint(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlUintArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseToml(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseToml(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeToml(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeToml(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"computeCreate2Address(bytes32,bytes32,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"computeCreate2Address(bytes32,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"computeCreateAddress(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"copyStorage(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"ensNamehash(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getLabel(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"label(address,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"pauseTracing()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomAddress()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomBool()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomBytes(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomBytes4()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomBytes8()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomInt()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomInt(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomUint()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomUint(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomUint(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"resumeTracing()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setArbitraryStorage(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toBase64URL(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toBase64URL(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toBase64(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toBase64(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"Vm\": {\n            \"createWallet(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createWallet(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createWallet(uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deriveKey(string,uint32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deriveKey(string,string,uint32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deriveKey(string,uint32,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deriveKey(string,string,uint32,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"publicKeyP256(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rememberKey(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rememberKeys(string,string,uint32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rememberKeys(string,string,string,uint32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signCompact((address,uint256,uint256,uint256),bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signCompact(uint256,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signCompact(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signCompact(address,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signP256(uint256,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"sign((address,uint256,uint256,uint256),bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"sign(uint256,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"sign(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"sign(address,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envAddress(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envAddress(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBool(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBool(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBytes32(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBytes32(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBytes(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBytes(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envExists(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envInt(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envInt(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,bool[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,int256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envString(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envString(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envUint(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envUint(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"isContext(uint8)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setEnv(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"accesses(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"addr(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"eth_getLogs(uint256,uint256,address,bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBlobBaseFee()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBlockNumber()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBlockTimestamp()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getMappingKeyAndParentOf(address,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getMappingLength(address,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getMappingSlotAt(address,bytes32,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getNonce(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getNonce((address,uint256,uint256,uint256))\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getRecordedLogs()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getStateDiff()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getStateDiffJson()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"lastCallGas()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"load(address,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"pauseGasMetering()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"record()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"recordLogs()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"resetGasMetering()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"resumeGasMetering()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rpc(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rpc(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startDebugTraceRecording()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startMappingRecording()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startStateDiffRecording()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopAndReturnDebugTraceRecording()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopAndReturnStateDiff()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopMappingRecording()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"closeFile(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"copyFile(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createDir(string,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deployCode(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deployCode(string,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"exists(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"ffi(string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"fsMetadata(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getArtifactPathByCode(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getArtifactPathByDeployedCode(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBroadcast(string,uint64,uint8)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBroadcasts(string,uint64,uint8)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBroadcasts(string,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getCode(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getDeployedCode(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getDeployment(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getDeployment(string,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getDeployments(string,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"isDir(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"isFile(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"projectRoot()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"prompt(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"promptAddress(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"promptSecret(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"promptSecretUint(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"promptUint(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readDir(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readDir(string,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readDir(string,uint64,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readFile(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readFileBinary(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readLine(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readLink(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"removeDir(string,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"removeFile(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"tryFfi(string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"unixTime()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeFile(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeFileBinary(string,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeLine(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"keyExistsJson(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonAddress(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonAddressArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBool(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBoolArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBytes(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBytes32(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBytes32Array(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBytesArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonInt(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonIntArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonKeys(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonString(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonStringArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonTypeArray(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonType(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonType(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonUint(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonUintArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJson(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJson(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeAddress(string,string,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeAddress(string,string,address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBool(string,string,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBool(string,string,bool[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBytes32(string,string,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBytes32(string,string,bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBytes(string,string,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBytes(string,string,bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeInt(string,string,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeInt(string,string,int256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeJson(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeJsonType(string,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeJsonType(string,string,string,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeString(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeString(string,string,string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeUintToHex(string,string,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeUint(string,string,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeUint(string,string,uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeJson(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeJson(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"keyExists(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"attachDelegation((uint8,bytes32,bytes32,uint64,address))\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"broadcastRawTransaction(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"broadcast()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"broadcast(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"broadcast(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getWallets()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signAndAttachDelegation(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signDelegation(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startBroadcast()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startBroadcast(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startBroadcast(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopBroadcast()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"contains(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"indexOf(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseAddress(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseBool(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseBytes(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseBytes32(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseInt(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseUint(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"replace(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"split(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toLowercase(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toUppercase(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"trim(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbsDecimal(uint256,uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbsDecimal(uint256,uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbsDecimal(int256,int256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbsDecimal(int256,int256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbs(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbs(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbs(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbs(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRelDecimal(uint256,uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRelDecimal(uint256,uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRelDecimal(int256,int256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRelDecimal(int256,int256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRel(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRel(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRel(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRel(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEqDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEqDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEqDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEqDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bool,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bool,bool,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes,bytes,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bool[],bool[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bool[],bool[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(uint256[],uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(uint256[],uint256[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(int256[],int256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(int256[],int256[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(address[],address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(address[],address[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes32[],bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes32[],bytes32[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(string[],string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(string[],string[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes[],bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes[],bytes[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(address,address,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes32,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes32,bytes32,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertFalse(bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertFalse(bool,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGeDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGeDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGeDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGeDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGe(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGe(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGe(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGe(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGtDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGtDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGtDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGtDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGt(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGt(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGt(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGt(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLeDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLeDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLeDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLeDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLe(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLe(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLe(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLe(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLtDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLtDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLtDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLtDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLt(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLt(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLt(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLt(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEqDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEqDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEqDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEqDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bool,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bool,bool,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes,bytes,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bool[],bool[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bool[],bool[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(uint256[],uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(uint256[],uint256[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(int256[],int256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(int256[],int256[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(address[],address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(address[],address[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes32[],bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes32[],bytes32[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(string[],string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(string[],string[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes[],bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes[],bytes[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(address,address,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes32,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes32,bytes32,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertTrue(bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertTrue(bool,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assume(bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assumeNoRevert()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assumeNoRevert((address,bool,bytes))\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assumeNoRevert((address,bool,bytes)[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"breakpoint(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"breakpoint(string,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getFoundryVersion()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rpcUrl(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rpcUrlStructs()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rpcUrls()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"sleep(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"keyExistsToml(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlAddress(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlAddressArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBool(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBoolArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBytes(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBytes32(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBytes32Array(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBytesArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlInt(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlIntArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlKeys(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlString(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlStringArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlTypeArray(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlType(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlType(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlUint(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlUintArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseToml(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseToml(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeToml(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeToml(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"computeCreate2Address(bytes32,bytes32,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"computeCreate2Address(bytes32,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"computeCreateAddress(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"copyStorage(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"ensNamehash(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getLabel(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"label(address,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"pauseTracing()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomAddress()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomBool()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomBytes(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomBytes4()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomBytes8()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomInt()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomInt(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomUint()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomUint(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomUint(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"resumeTracing()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setArbitraryStorage(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toBase64URL(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toBase64URL(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toBase64(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toBase64(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"activeFork()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"allowCheatcodes(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"blobBaseFee(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"blobhashes(bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"chainId(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"clearMockedCalls()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"cloneAccount(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"coinbase(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createFork(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createFork(string,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createFork(string,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createSelectFork(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createSelectFork(string,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createSelectFork(string,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deal(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deleteStateSnapshot(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deleteStateSnapshots()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"difficulty(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"dumpState(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"etch(address,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"fee(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBlobhashes()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"isPersistent(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"loadAllocs(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"makePersistent(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"makePersistent(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"makePersistent(address,address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"makePersistent(address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"mockCallRevert(address,bytes,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"mockCallRevert(address,uint256,bytes,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"mockCallRevert(address,bytes4,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"mockCallRevert(address,uint256,bytes4,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"mockCall(address,bytes,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"mockCall(address,uint256,bytes,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"mockCall(address,bytes4,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"mockCall(address,uint256,bytes4,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"mockCalls(address,bytes,bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"mockCalls(address,uint256,bytes,bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"mockFunction(address,address,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"prank(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"prank(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"prank(address,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"prank(address,address,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"prevrandao(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"prevrandao(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readCallers()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"resetNonce(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"revertToState(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"revertToStateAndDelete(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"revokePersistent(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"revokePersistent(address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"roll(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rollFork(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rollFork(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rollFork(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rollFork(uint256,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"selectFork(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setBlockhash(uint256,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setNonce(address,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setNonceUnsafe(address,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"snapshotGasLastCall(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"snapshotGasLastCall(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"snapshotState()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"snapshotValue(string,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"snapshotValue(string,string,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startPrank(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startPrank(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startPrank(address,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startPrank(address,address,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startSnapshotGas(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startSnapshotGas(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopPrank()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopSnapshotGas()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopSnapshotGas(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopSnapshotGas(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"store(address,bytes32,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"transact(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"transact(uint256,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"txGasPrice(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"warp(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deleteSnapshot(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deleteSnapshots()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"revertToAndDelete(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"revertTo(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"snapshot()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectCallMinGas(address,uint256,uint64,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectCallMinGas(address,uint256,uint64,bytes,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectCall(address,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectCall(address,bytes,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectCall(address,uint256,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectCall(address,uint256,bytes,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectCall(address,uint256,uint64,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectCall(address,uint256,uint64,bytes,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectEmitAnonymous(bool,bool,bool,bool,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectEmitAnonymous(bool,bool,bool,bool,bool,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectEmitAnonymous()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectEmitAnonymous(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectEmit(bool,bool,bool,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectEmit(bool,bool,bool,bool,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectEmit()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectEmit(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectEmit(bool,bool,bool,bool,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectEmit(bool,bool,bool,bool,address,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectEmit(uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectEmit(address,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectPartialRevert(bytes4)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectPartialRevert(bytes4,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectRevert()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectRevert(bytes4)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectRevert(bytes4,address,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectRevert(bytes,address,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectRevert(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectRevert(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectRevert(bytes4,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectRevert(bytes,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectRevert(uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectRevert(bytes4,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectRevert(bytes,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectRevert(address,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectSafeMemory(uint64,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectSafeMemoryCall(uint64,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"skip(bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"skip(bool,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopExpectSafeMemory()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"console\": {},\n        \"IMulticall3\": {\n            \"aggregate((address,bytes)[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"aggregate3((address,bool,bytes)[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"aggregate3Value((address,bool,uint256,bytes)[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"blockAndAggregate((address,bytes)[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBasefee()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBlockHash(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBlockNumber()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getChainId()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getCurrentBlockCoinbase()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getCurrentBlockDifficulty()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getCurrentBlockGasLimit()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getCurrentBlockTimestamp()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getEthBalance(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getLastBlockHash()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"tryAggregate(bool,(address,bytes)[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"tryBlockAndAggregate(bool,(address,bytes)[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"safeconsole\": {},\n        \"Ownable\": {\n            \"owner()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"renounceOwnership()\",\n                    \"transferOwnership(address)\"\n                ]\n            },\n            \"renounceOwnership()\": {\n                \"impacts\": [\n                    \"owner()\",\n                    \"renounceOwnership()\",\n                    \"transferOwnership(address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"renounceOwnership()\",\n                    \"transferOwnership(address)\"\n                ]\n            },\n            \"transferOwnership(address)\": {\n                \"impacts\": [\n                    \"owner()\",\n                    \"renounceOwnership()\",\n                    \"transferOwnership(address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"renounceOwnership()\",\n                    \"transferOwnership(address)\"\n                ]\n            }\n        },\n        \"Context\": {},\n        \"ActorManager\": {},\n        \"AssetManager\": {},\n        \"EnumerableSet\": {},\n        \"ERC20\": {\n            \"approve(address,uint256)\": {\n                \"impacts\": [\n                    \"transferFrom(address,address,uint256)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"transfer(address,uint256)\": {\n                \"impacts\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\"\n                ]\n            },\n            \"transferFrom(address,address,uint256)\": {\n                \"impacts\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"approve(address,uint256)\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\"\n                ]\n            },\n            \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\": {\n                \"impacts\": [\n                    \"transferFrom(address,address,uint256)\",\n                    \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\"\n                ],\n                \"is_impacted_by\": [\n                    \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\"\n                ]\n            },\n            \"DOMAIN_SEPARATOR()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"MockERC20\": {\n            \"approve(address,uint256)\": {\n                \"impacts\": [\n                    \"transferFrom(address,address,uint256)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"transfer(address,uint256)\": {\n                \"impacts\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"mint(address,uint256)\",\n                    \"burn(address,uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"mint(address,uint256)\",\n                    \"burn(address,uint256)\"\n                ]\n            },\n            \"transferFrom(address,address,uint256)\": {\n                \"impacts\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"mint(address,uint256)\",\n                    \"burn(address,uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"approve(address,uint256)\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\",\n                    \"mint(address,uint256)\",\n                    \"burn(address,uint256)\"\n                ]\n            },\n            \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\": {\n                \"impacts\": [\n                    \"transferFrom(address,address,uint256)\",\n                    \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\"\n                ],\n                \"is_impacted_by\": [\n                    \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\",\n                    \"constructor(string,string,uint8)\"\n                ]\n            },\n            \"DOMAIN_SEPARATOR()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor(string,string,uint8)\"\n                ]\n            },\n            \"constructor(string,string,uint8)\": {\n                \"impacts\": [\n                    \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\",\n                    \"DOMAIN_SEPARATOR()\",\n                    \"constructor(string,string,uint8)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor(string,string,uint8)\"\n                ]\n            },\n            \"mint(address,uint256)\": {\n                \"impacts\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"mint(address,uint256)\",\n                    \"burn(address,uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"mint(address,uint256)\",\n                    \"burn(address,uint256)\"\n                ]\n            },\n            \"burn(address,uint256)\": {\n                \"impacts\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"mint(address,uint256)\",\n                    \"burn(address,uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"mint(address,uint256)\",\n                    \"burn(address,uint256)\"\n                ]\n            }\n        },\n        \"Panic\": {},\n        \"Utils\": {},\n        \"CLFExample\": {\n            \"owner()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"renounceOwnership()\",\n                    \"transferOwnership(address)\",\n                    \"constructor(address,address,address)\"\n                ]\n            },\n            \"renounceOwnership()\": {\n                \"impacts\": [\n                    \"owner()\",\n                    \"renounceOwnership()\",\n                    \"transferOwnership(address)\",\n                    \"constructor(address,address,address)\",\n                    \"setRate(uint256)\",\n                    \"endContract()\",\n                    \"payEmployee()\"\n                ],\n                \"is_impacted_by\": [\n                    \"renounceOwnership()\",\n                    \"transferOwnership(address)\",\n                    \"constructor(address,address,address)\"\n                ]\n            },\n            \"transferOwnership(address)\": {\n                \"impacts\": [\n                    \"owner()\",\n                    \"renounceOwnership()\",\n                    \"transferOwnership(address)\",\n                    \"constructor(address,address,address)\",\n                    \"setRate(uint256)\",\n                    \"endContract()\",\n                    \"payEmployee()\"\n                ],\n                \"is_impacted_by\": [\n                    \"renounceOwnership()\",\n                    \"transferOwnership(address)\",\n                    \"constructor(address,address,address)\"\n                ]\n            },\n            \"()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"constructor(address,address,address)\": {\n                \"impacts\": [\n                    \"owner()\",\n                    \"renounceOwnership()\",\n                    \"transferOwnership(address)\",\n                    \"constructor(address,address,address)\",\n                    \"startWork()\",\n                    \"endWork()\",\n                    \"setRate(uint256)\",\n                    \"endContract()\",\n                    \"payEmployee()\"\n                ],\n                \"is_impacted_by\": [\n                    \"renounceOwnership()\",\n                    \"transferOwnership(address)\",\n                    \"constructor(address,address,address)\"\n                ]\n            },\n            \"startWork()\": {\n                \"impacts\": [\n                    \"startWork()\",\n                    \"endWork()\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor(address,address,address)\",\n                    \"startWork()\",\n                    \"endWork()\",\n                    \"endContract()\"\n                ]\n            },\n            \"endWork()\": {\n                \"impacts\": [\n                    \"startWork()\",\n                    \"endWork()\",\n                    \"endContract()\",\n                    \"payEmployee()\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor(address,address,address)\",\n                    \"startWork()\",\n                    \"endWork()\",\n                    \"endContract()\",\n                    \"payEmployee()\"\n                ]\n            },\n            \"setRate(uint256)\": {\n                \"impacts\": [\n                    \"setRate(uint256)\",\n                    \"endContract()\",\n                    \"payEmployee()\"\n                ],\n                \"is_impacted_by\": [\n                    \"renounceOwnership()\",\n                    \"transferOwnership(address)\",\n                    \"constructor(address,address,address)\",\n                    \"setRate(uint256)\"\n                ]\n            },\n            \"endContract()\": {\n                \"impacts\": [\n                    \"startWork()\",\n                    \"endWork()\",\n                    \"endContract()\",\n                    \"payEmployee()\"\n                ],\n                \"is_impacted_by\": [\n                    \"renounceOwnership()\",\n                    \"transferOwnership(address)\",\n                    \"constructor(address,address,address)\",\n                    \"endWork()\",\n                    \"setRate(uint256)\",\n                    \"endContract()\",\n                    \"payEmployee()\"\n                ]\n            },\n            \"payEmployee()\": {\n                \"impacts\": [\n                    \"endWork()\",\n                    \"endContract()\",\n                    \"payEmployee()\"\n                ],\n                \"is_impacted_by\": [\n                    \"renounceOwnership()\",\n                    \"transferOwnership(address)\",\n                    \"constructor(address,address,address)\",\n                    \"endWork()\",\n                    \"setRate(uint256)\",\n                    \"endContract()\",\n                    \"payEmployee()\"\n                ]\n            }\n        },\n        \"BaseTests\": {\n            \"excludeArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifactSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetInterfaces()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"failed()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setUp()\": {\n                \"impacts\": [\n                    \"setUp()\",\n                    \"sessionStarterHelper()\",\n                    \"sessionCloserHelper()\",\n                    \"calculationHelper()\"\n                ],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"sessionStarterHelper()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"sessionCloserHelper()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"calculationHelper()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            }\n        },\n        \"CLFExampleTest\": {\n            \"setUp()\": {\n                \"impacts\": [\n                    \"setUp()\",\n                    \"sessionStarterHelper()\",\n                    \"sessionCloserHelper()\",\n                    \"calculationHelper()\",\n                    \"test_workSessionRevert()\",\n                    \"test_workSessionStart()\",\n                    \"test_workSessionEnd()\",\n                    \"test_ownerCanPayTheUser()\"\n                ],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"sessionStarterHelper()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"sessionCloserHelper()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"calculationHelper()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"excludeArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifactSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetInterfaces()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"failed()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"test_workSessionRevert()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_workSessionStart()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_workSessionEnd()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_ownerCanPayTheUser()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            }\n        },\n        \"BeforeAfter\": {},\n        \"CryticTester\": {\n            \"switchActor(uint256)\": {\n                \"impacts\": [\n                    \"asset_approve(address,uint128)\",\n                    \"cLFExample_endContract()\",\n                    \"cLFExample_endWork()\",\n                    \"cLFExample_payEmployee()\",\n                    \"cLFExample_renounceOwnership()\",\n                    \"cLFExample_startWork()\",\n                    \"constructor()\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"switch_asset(uint256)\": {\n                \"impacts\": [\n                    \"asset_approve(address,uint128)\",\n                    \"asset_mint(address,uint128)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"add_new_asset(uint8)\": {\n                \"impacts\": [\n                    \"asset_approve(address,uint128)\",\n                    \"asset_mint(address,uint128)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"asset_approve(address,uint128)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"switch_asset(uint256)\",\n                    \"add_new_asset(uint8)\"\n                ]\n            },\n            \"asset_mint(address,uint128)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switch_asset(uint256)\",\n                    \"add_new_asset(uint8)\"\n                ]\n            },\n            \"cLFExample_endContract()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"constructor()\"\n                ]\n            },\n            \"cLFExample_endWork()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"constructor()\"\n                ]\n            },\n            \"cLFExample_payEmployee()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"constructor()\"\n                ]\n            },\n            \"cLFExample_renounceOwnership()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"constructor()\"\n                ]\n            },\n            \"cLFExample_setRate(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor()\"\n                ]\n            },\n            \"cLFExample_startWork()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"constructor()\"\n                ]\n            },\n            \"cLFExample_transferOwnership(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor()\"\n                ]\n            },\n            \"constructor()\": {\n                \"impacts\": [\n                    \"cLFExample_endContract()\",\n                    \"cLFExample_endWork()\",\n                    \"cLFExample_payEmployee()\",\n                    \"cLFExample_renounceOwnership()\",\n                    \"cLFExample_setRate(uint256)\",\n                    \"cLFExample_startWork()\",\n                    \"cLFExample_transferOwnership(address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\"\n                ]\n            }\n        },\n        \"CryticToFoundry\": {\n            \"excludeArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifactSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetInterfaces()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"failed()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"switchActor(uint256)\": {\n                \"impacts\": [\n                    \"asset_approve(address,uint128)\",\n                    \"cLFExample_endContract()\",\n                    \"cLFExample_endWork()\",\n                    \"cLFExample_payEmployee()\",\n                    \"cLFExample_renounceOwnership()\",\n                    \"cLFExample_startWork()\",\n                    \"setUp()\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"switch_asset(uint256)\": {\n                \"impacts\": [\n                    \"asset_approve(address,uint128)\",\n                    \"asset_mint(address,uint128)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"add_new_asset(uint8)\": {\n                \"impacts\": [\n                    \"asset_approve(address,uint128)\",\n                    \"asset_mint(address,uint128)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"asset_approve(address,uint128)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"switch_asset(uint256)\",\n                    \"add_new_asset(uint8)\"\n                ]\n            },\n            \"asset_mint(address,uint128)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switch_asset(uint256)\",\n                    \"add_new_asset(uint8)\"\n                ]\n            },\n            \"cLFExample_endContract()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"setUp()\"\n                ]\n            },\n            \"cLFExample_endWork()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"setUp()\"\n                ]\n            },\n            \"cLFExample_payEmployee()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"setUp()\"\n                ]\n            },\n            \"cLFExample_renounceOwnership()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"setUp()\"\n                ]\n            },\n            \"cLFExample_setRate(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"cLFExample_startWork()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"setUp()\"\n                ]\n            },\n            \"cLFExample_transferOwnership(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"setUp()\": {\n                \"impacts\": [\n                    \"cLFExample_endContract()\",\n                    \"cLFExample_endWork()\",\n                    \"cLFExample_payEmployee()\",\n                    \"cLFExample_renounceOwnership()\",\n                    \"cLFExample_setRate(uint256)\",\n                    \"cLFExample_startWork()\",\n                    \"cLFExample_transferOwnership(address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\"\n                ]\n            },\n            \"test_crytic()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"Properties\": {},\n        \"Setup\": {},\n        \"TargetFunctions\": {\n            \"switchActor(uint256)\": {\n                \"impacts\": [\n                    \"asset_approve(address,uint128)\",\n                    \"cLFExample_endContract()\",\n                    \"cLFExample_endWork()\",\n                    \"cLFExample_payEmployee()\",\n                    \"cLFExample_renounceOwnership()\",\n                    \"cLFExample_startWork()\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"switch_asset(uint256)\": {\n                \"impacts\": [\n                    \"asset_approve(address,uint128)\",\n                    \"asset_mint(address,uint128)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"add_new_asset(uint8)\": {\n                \"impacts\": [\n                    \"asset_approve(address,uint128)\",\n                    \"asset_mint(address,uint128)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"asset_approve(address,uint128)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"switch_asset(uint256)\",\n                    \"add_new_asset(uint8)\"\n                ]\n            },\n            \"asset_mint(address,uint128)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switch_asset(uint256)\",\n                    \"add_new_asset(uint8)\"\n                ]\n            },\n            \"cLFExample_endContract()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\"\n                ]\n            },\n            \"cLFExample_endWork()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\"\n                ]\n            },\n            \"cLFExample_payEmployee()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\"\n                ]\n            },\n            \"cLFExample_renounceOwnership()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\"\n                ]\n            },\n            \"cLFExample_setRate(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"cLFExample_startWork()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\"\n                ]\n            },\n            \"cLFExample_transferOwnership(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"AdminTargets\": {},\n        \"CLFExampleTargets\": {\n            \"cLFExample_endContract()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"cLFExample_endWork()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"cLFExample_payEmployee()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"cLFExample_renounceOwnership()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"cLFExample_setRate(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"cLFExample_startWork()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"cLFExample_transferOwnership(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"DoomsdayTargets\": {},\n        \"ManagersTargets\": {\n            \"switchActor(uint256)\": {\n                \"impacts\": [\n                    \"asset_approve(address,uint128)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"switch_asset(uint256)\": {\n                \"impacts\": [\n                    \"asset_approve(address,uint128)\",\n                    \"asset_mint(address,uint128)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"add_new_asset(uint8)\": {\n                \"impacts\": [\n                    \"asset_approve(address,uint128)\",\n                    \"asset_mint(address,uint128)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"asset_approve(address,uint128)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"switch_asset(uint256)\",\n                    \"add_new_asset(uint8)\"\n                ]\n            },\n            \"asset_mint(address,uint128)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switch_asset(uint256)\",\n                    \"add_new_asset(uint8)\"\n                ]\n            }\n        }\n    },\n    \"constructors\": {\n        \"MockOffchainAggregator\": \"constructor(uint8,int256)\",\n        \"MockV3Aggregator\": \"constructor(uint8,int256)\",\n        \"Ownable\": \"constructor(address)\",\n        \"ActorManager\": \"constructor()\",\n        \"ERC20\": \"constructor(string,string,uint8)\",\n        \"MockERC20\": \"constructor(string,string,uint8)\",\n        \"CLFExample\": \"constructor(address,address,address)\",\n        \"BeforeAfter\": \"constructor()\",\n        \"CryticTester\": \"constructor()\",\n        \"CryticToFoundry\": \"constructor()\",\n        \"Properties\": \"constructor()\",\n        \"Setup\": \"constructor()\",\n        \"TargetFunctions\": \"constructor()\",\n        \"AdminTargets\": \"constructor()\",\n        \"CLFExampleTargets\": \"constructor()\",\n        \"DoomsdayTargets\": \"constructor()\",\n        \"ManagersTargets\": \"constructor()\"\n    },\n    \"have_external_calls\": {\n        \"MockV3Aggregator\": [\n            \"latestTimestamp()\",\n            \"getRoundData(uint80)\",\n            \"latestAnswer()\",\n            \"latestRoundData()\",\n            \"updateAnswer(int256)\",\n            \"decimals()\",\n            \"updateRoundData(uint80,int256,uint256,uint256)\",\n            \"getTimestamp(uint256)\",\n            \"getAnswer(uint256)\",\n            \"latestRound()\"\n        ],\n        \"FoundryAsserts\": [\n            \"failed()\"\n        ],\n        \"StdAssertions\": [\n            \"failed()\"\n        ],\n        \"Test\": [\n            \"failed()\"\n        ],\n        \"CLFExample\": [\n            \"payEmployee()\",\n            \"endContract()\"\n        ],\n        \"BaseTests\": [\n            \"sessionCloserHelper()\",\n            \"failed()\",\n            \"calculationHelper()\",\n            \"sessionStarterHelper()\",\n            \"setUp()\"\n        ],\n        \"CLFExampleTest\": [\n            \"failed()\",\n            \"sessionCloserHelper()\",\n            \"test_workSessionStart()\",\n            \"calculationHelper()\",\n            \"sessionStarterHelper()\",\n            \"test_workSessionEnd()\",\n            \"test_workSessionRevert()\",\n            \"setUp()\",\n            \"test_ownerCanPayTheUser()\"\n        ],\n        \"CryticTester\": [\n            \"cLFExample_endContract()\",\n            \"add_new_asset(uint8)\",\n            \"cLFExample_transferOwnership(address)\",\n            \"switchActor(uint256)\",\n            \"cLFExample_renounceOwnership()\",\n            \"asset_approve(address,uint128)\",\n            \"switch_asset(uint256)\",\n            \"cLFExample_payEmployee()\",\n            \"cLFExample_setRate(uint256)\",\n            \"asset_mint(address,uint128)\",\n            \"cLFExample_endWork()\",\n            \"cLFExample_startWork()\"\n        ],\n        \"CryticToFoundry\": [\n            \"cLFExample_endContract()\",\n            \"failed()\",\n            \"add_new_asset(uint8)\",\n            \"cLFExample_transferOwnership(address)\",\n            \"switchActor(uint256)\",\n            \"cLFExample_renounceOwnership()\",\n            \"asset_approve(address,uint128)\",\n            \"switch_asset(uint256)\",\n            \"cLFExample_payEmployee()\",\n            \"cLFExample_setRate(uint256)\",\n            \"asset_mint(address,uint128)\",\n            \"cLFExample_endWork()\",\n            \"cLFExample_startWork()\"\n        ],\n        \"TargetFunctions\": [\n            \"cLFExample_endContract()\",\n            \"add_new_asset(uint8)\",\n            \"cLFExample_transferOwnership(address)\",\n            \"switchActor(uint256)\",\n            \"cLFExample_renounceOwnership()\",\n            \"asset_approve(address,uint128)\",\n            \"switch_asset(uint256)\",\n            \"cLFExample_payEmployee()\",\n            \"cLFExample_setRate(uint256)\",\n            \"asset_mint(address,uint128)\",\n            \"cLFExample_endWork()\",\n            \"cLFExample_startWork()\"\n        ],\n        \"CLFExampleTargets\": [\n            \"cLFExample_endContract()\",\n            \"cLFExample_transferOwnership(address)\",\n            \"cLFExample_setRate(uint256)\",\n            \"cLFExample_renounceOwnership()\",\n            \"cLFExample_payEmployee()\",\n            \"cLFExample_endWork()\",\n            \"cLFExample_startWork()\"\n        ],\n        \"ManagersTargets\": [\n            \"add_new_asset(uint8)\",\n            \"switchActor(uint256)\",\n            \"asset_approve(address,uint128)\",\n            \"switch_asset(uint256)\",\n            \"asset_mint(address,uint128)\"\n        ]\n    },\n    \"use_balance\": {\n        \"CLFExampleTest\": [\n            \"test_ownerCanPayTheUser()\"\n        ]\n    },\n    \"solc_versions\": [\n        \"0.8.26\"\n    ],\n    \"with_fallback\": [],\n    \"with_receive\": [\n        \"CLFExample\"\n    ]\n}", "markdown": "{\n    \"payable\": {\n        \"IMulticall3\": [\n            \"aggregate((address,bytes)[])\",\n            \"aggregate3((address,bool,bytes)[])\",\n            \"aggregate3Value((address,bool,uint256,bytes)[])\",\n            \"blockAndAggregate((address,bytes)[])\",\n            \"tryAggregate(bool,(address,bytes)[])\",\n            \"tryBlockAndAggregate(bool,(address,bytes)[])\"\n        ],\n        \"CLFExample\": [\n            \"()\"\n        ],\n        \"CryticTester\": [\n            \"constructor()\"\n        ]\n    },\n    \"timestamp\": {\n        \"MockOffchainAggregator\": [\n            \"constructor(uint8,int256)\",\n            \"updateAnswer(int256)\"\n        ],\n        \"ERC20\": [\n            \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\"\n        ],\n        \"MockERC20\": [\n            \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\"\n        ],\n        \"CLFExample\": [\n            \"startWork()\",\n            \"endWork()\",\n            \"endContract()\",\n            \"payEmployee()\"\n        ],\n        \"BaseTests\": [\n            \"sessionStarterHelper()\",\n            \"sessionCloserHelper()\"\n        ],\n        \"CLFExampleTest\": [\n            \"sessionStarterHelper()\",\n            \"sessionCloserHelper()\",\n            \"test_workSessionStart()\",\n            \"test_workSessionEnd()\",\n            \"test_ownerCanPayTheUser()\"\n        ]\n    },\n    \"block_number\": {},\n    \"msg_sender\": {\n        \"Ownable\": [\n            \"renounceOwnership()\",\n            \"transferOwnership(address)\"\n        ],\n        \"ERC20\": [\n            \"approve(address,uint256)\",\n            \"transfer(address,uint256)\",\n            \"transferFrom(address,address,uint256)\"\n        ],\n        \"MockERC20\": [\n            \"approve(address,uint256)\",\n            \"transfer(address,uint256)\",\n            \"transferFrom(address,address,uint256)\"\n        ],\n        \"CLFExample\": [\n            \"renounceOwnership()\",\n            \"transferOwnership(address)\",\n            \"startWork()\",\n            \"endWork()\",\n            \"setRate(uint256)\",\n            \"endContract()\",\n            \"payEmployee()\"\n        ]\n    },\n    \"msg_gas\": {},\n    \"assert\": {\n        \"CryticTester\": {\n            \"cLFExample_endContract()\": [\n                {\n                    \"start\": 1225,\n                    \"length\": 13,\n                    \"filename_relative\": \"lib/chimera/src/CryticAsserts.sol\",\n                    \"filename_absolute\": \"/Users/patrickcarneiro/77IL/77T/cl-feeds-ww/lib/chimera/src/CryticAsserts.sol\",\n                    \"filename_short\": \"lib/chimera/src/CryticAsserts.sol\",\n                    \"is_dependency\": true,\n                    \"lines\": [\n                        47\n                    ],\n                    \"starting_column\": 13,\n                    \"ending_column\": 26\n                }\n            ],\n            \"cLFExample_endWork()\": [\n                {\n                    \"start\": 1225,\n                    \"length\": 13,\n                    \"filename_relative\": \"lib/chimera/src/CryticAsserts.sol\",\n                    \"filename_absolute\": \"/Users/patrickcarneiro/77IL/77T/cl-feeds-ww/lib/chimera/src/CryticAsserts.sol\",\n                    \"filename_short\": \"lib/chimera/src/CryticAsserts.sol\",\n                    \"is_dependency\": true,\n                    \"lines\": [\n                        47\n                    ],\n                    \"starting_column\": 13,\n                    \"ending_column\": 26\n                }\n            ]\n        }\n    },\n    \"constant_functions\": {\n        \"AggregatorV3Interface\": [\n            \"decimals()\",\n            \"description()\",\n            \"version()\",\n            \"getRoundData(uint80)\",\n            \"latestRoundData()\"\n        ],\n        \"MockOffchainAggregator\": [\n            \"getRoundData(uint80)\",\n            \"latestRoundData()\",\n            \"decimals()\",\n            \"latestAnswer()\",\n            \"latestTimestamp()\",\n            \"latestRound()\",\n            \"minAnswer()\",\n            \"maxAnswer()\",\n            \"getAnswer(uint256)\",\n            \"getTimestamp(uint256)\"\n        ],\n        \"MockV3Aggregator\": [\n            \"version()\",\n            \"decimals()\",\n            \"getAnswer(uint256)\",\n            \"getRoundData(uint80)\",\n            \"latestRoundData()\",\n            \"getTimestamp(uint256)\",\n            \"latestAnswer()\",\n            \"latestTimestamp()\",\n            \"latestRound()\",\n            \"description()\",\n            \"version()\",\n            \"aggregator()\",\n            \"proposedAggregator()\"\n        ],\n        \"AggregatorInterface\": [\n            \"latestAnswer()\",\n            \"latestTimestamp()\",\n            \"latestRound()\",\n            \"getAnswer(uint256)\",\n            \"getTimestamp(uint256)\"\n        ],\n        \"AggregatorV2V3Interface\": [\n            \"decimals()\",\n            \"description()\",\n            \"version()\",\n            \"getRoundData(uint80)\",\n            \"latestRoundData()\",\n            \"latestAnswer()\",\n            \"latestTimestamp()\",\n            \"latestRound()\",\n            \"getAnswer(uint256)\",\n            \"getTimestamp(uint256)\"\n        ],\n        \"FoundryAsserts\": [\n            \"excludeArtifacts()\",\n            \"excludeContracts()\",\n            \"excludeSelectors()\",\n            \"excludeSenders()\",\n            \"targetArtifacts()\",\n            \"targetArtifactSelectors()\",\n            \"targetContracts()\",\n            \"targetSelectors()\",\n            \"targetSenders()\",\n            \"targetInterfaces()\",\n            \"failed()\",\n            \"IS_TEST()\"\n        ],\n        \"StdAssertions\": [\n            \"failed()\"\n        ],\n        \"stdError\": [\n            \"assertionError()\",\n            \"arithmeticError()\",\n            \"divisionError()\",\n            \"enumConversionError()\",\n            \"encodeStorageError()\",\n            \"popError()\",\n            \"indexOOBError()\",\n            \"memOverflowError()\",\n            \"zeroVarError()\"\n        ],\n        \"StdInvariant\": [\n            \"excludeArtifacts()\",\n            \"excludeContracts()\",\n            \"excludeSelectors()\",\n            \"excludeSenders()\",\n            \"targetArtifacts()\",\n            \"targetArtifactSelectors()\",\n            \"targetContracts()\",\n            \"targetSelectors()\",\n            \"targetSenders()\",\n            \"targetInterfaces()\"\n        ],\n        \"Test\": [\n            \"excludeArtifacts()\",\n            \"excludeContracts()\",\n            \"excludeSelectors()\",\n            \"excludeSenders()\",\n            \"targetArtifacts()\",\n            \"targetArtifactSelectors()\",\n            \"targetContracts()\",\n            \"targetSelectors()\",\n            \"targetSenders()\",\n            \"targetInterfaces()\",\n            \"failed()\",\n            \"IS_TEST()\"\n        ],\n        \"VmSafe\": [\n            \"deriveKey(string,uint32)\",\n            \"deriveKey(string,string,uint32)\",\n            \"deriveKey(string,uint32,string)\",\n            \"deriveKey(string,string,uint32,string)\",\n            \"publicKeyP256(uint256)\",\n            \"signCompact(uint256,bytes32)\",\n            \"signCompact(bytes32)\",\n            \"signCompact(address,bytes32)\",\n            \"signP256(uint256,bytes32)\",\n            \"sign(uint256,bytes32)\",\n            \"sign(bytes32)\",\n            \"sign(address,bytes32)\",\n            \"envAddress(string)\",\n            \"envAddress(string,string)\",\n            \"envBool(string)\",\n            \"envBool(string,string)\",\n            \"envBytes32(string)\",\n            \"envBytes32(string,string)\",\n            \"envBytes(string)\",\n            \"envBytes(string,string)\",\n            \"envExists(string)\",\n            \"envInt(string)\",\n            \"envInt(string,string)\",\n            \"envOr(string,bool)\",\n            \"envOr(string,uint256)\",\n            \"envOr(string,string,address[])\",\n            \"envOr(string,string,bytes32[])\",\n            \"envOr(string,string,string[])\",\n            \"envOr(string,string,bytes[])\",\n            \"envOr(string,int256)\",\n            \"envOr(string,address)\",\n            \"envOr(string,bytes32)\",\n            \"envOr(string,string)\",\n            \"envOr(string,bytes)\",\n            \"envOr(string,string,bool[])\",\n            \"envOr(string,string,uint256[])\",\n            \"envOr(string,string,int256[])\",\n            \"envString(string)\",\n            \"envString(string,string)\",\n            \"envUint(string)\",\n            \"envUint(string,string)\",\n            \"isContext(uint8)\",\n            \"addr(uint256)\",\n            \"getBlobBaseFee()\",\n            \"getBlockNumber()\",\n            \"getBlockTimestamp()\",\n            \"getNonce(address)\",\n            \"getStateDiff()\",\n            \"getStateDiffJson()\",\n            \"lastCallGas()\",\n            \"load(address,bytes32)\",\n            \"exists(string)\",\n            \"fsMetadata(string)\",\n            \"getArtifactPathByCode(bytes)\",\n            \"getArtifactPathByDeployedCode(bytes)\",\n            \"getBroadcast(string,uint64,uint8)\",\n            \"getBroadcasts(string,uint64,uint8)\",\n            \"getBroadcasts(string,uint64)\",\n            \"getCode(string)\",\n            \"getDeployedCode(string)\",\n            \"getDeployment(string)\",\n            \"getDeployment(string,uint64)\",\n            \"getDeployments(string,uint64)\",\n            \"isDir(string)\",\n            \"isFile(string)\",\n            \"projectRoot()\",\n            \"readDir(string)\",\n            \"readDir(string,uint64)\",\n            \"readDir(string,uint64,bool)\",\n            \"readFile(string)\",\n            \"readFileBinary(string)\",\n            \"readLine(string)\",\n            \"readLink(string)\",\n            \"unixTime()\",\n            \"keyExistsJson(string,string)\",\n            \"parseJsonAddress(string,string)\",\n            \"parseJsonAddressArray(string,string)\",\n            \"parseJsonBool(string,string)\",\n            \"parseJsonBoolArray(string,string)\",\n            \"parseJsonBytes(string,string)\",\n            \"parseJsonBytes32(string,string)\",\n            \"parseJsonBytes32Array(string,string)\",\n            \"parseJsonBytesArray(string,string)\",\n            \"parseJsonInt(string,string)\",\n            \"parseJsonIntArray(string,string)\",\n            \"parseJsonKeys(string,string)\",\n            \"parseJsonString(string,string)\",\n            \"parseJsonStringArray(string,string)\",\n            \"parseJsonTypeArray(string,string,string)\",\n            \"parseJsonType(string,string)\",\n            \"parseJsonType(string,string,string)\",\n            \"parseJsonUint(string,string)\",\n            \"parseJsonUintArray(string,string)\",\n            \"parseJson(string)\",\n            \"parseJson(string,string)\",\n            \"serializeJsonType(string,bytes)\",\n            \"keyExists(string,string)\",\n            \"indexOf(string,string)\",\n            \"parseAddress(string)\",\n            \"parseBool(string)\",\n            \"parseBytes(string)\",\n            \"parseBytes32(string)\",\n            \"parseInt(string)\",\n            \"parseUint(string)\",\n            \"replace(string,string,string)\",\n            \"split(string,string)\",\n            \"toLowercase(string)\",\n            \"toString(address)\",\n            \"toString(bytes)\",\n            \"toString(bytes32)\",\n            \"toString(bool)\",\n            \"toString(uint256)\",\n            \"toString(int256)\",\n            \"toUppercase(string)\",\n            \"trim(string)\",\n            \"assertApproxEqAbsDecimal(uint256,uint256,uint256,uint256)\",\n            \"assertApproxEqAbsDecimal(uint256,uint256,uint256,uint256,string)\",\n            \"assertApproxEqAbsDecimal(int256,int256,uint256,uint256)\",\n            \"assertApproxEqAbsDecimal(int256,int256,uint256,uint256,string)\",\n            \"assertApproxEqAbs(uint256,uint256,uint256)\",\n            \"assertApproxEqAbs(uint256,uint256,uint256,string)\",\n            \"assertApproxEqAbs(int256,int256,uint256)\",\n            \"assertApproxEqAbs(int256,int256,uint256,string)\",\n            \"assertApproxEqRelDecimal(uint256,uint256,uint256,uint256)\",\n            \"assertApproxEqRelDecimal(uint256,uint256,uint256,uint256,string)\",\n            \"assertApproxEqRelDecimal(int256,int256,uint256,uint256)\",\n            \"assertApproxEqRelDecimal(int256,int256,uint256,uint256,string)\",\n            \"assertApproxEqRel(uint256,uint256,uint256)\",\n            \"assertApproxEqRel(uint256,uint256,uint256,string)\",\n            \"assertApproxEqRel(int256,int256,uint256)\",\n            \"assertApproxEqRel(int256,int256,uint256,string)\",\n            \"assertEqDecimal(uint256,uint256,uint256)\",\n            \"assertEqDecimal(uint256,uint256,uint256,string)\",\n            \"assertEqDecimal(int256,int256,uint256)\",\n            \"assertEqDecimal(int256,int256,uint256,string)\",\n            \"assertEq(bool,bool)\",\n            \"assertEq(bool,bool,string)\",\n            \"assertEq(string,string)\",\n            \"assertEq(string,string,string)\",\n            \"assertEq(bytes,bytes)\",\n            \"assertEq(bytes,bytes,string)\",\n            \"assertEq(bool[],bool[])\",\n            \"assertEq(bool[],bool[],string)\",\n            \"assertEq(uint256[],uint256[])\",\n            \"assertEq(uint256[],uint256[],string)\",\n            \"assertEq(int256[],int256[])\",\n            \"assertEq(int256[],int256[],string)\",\n            \"assertEq(uint256,uint256)\",\n            \"assertEq(address[],address[])\",\n            \"assertEq(address[],address[],string)\",\n            \"assertEq(bytes32[],bytes32[])\",\n            \"assertEq(bytes32[],bytes32[],string)\",\n            \"assertEq(string[],string[])\",\n            \"assertEq(string[],string[],string)\",\n            \"assertEq(bytes[],bytes[])\",\n            \"assertEq(bytes[],bytes[],string)\",\n            \"assertEq(uint256,uint256,string)\",\n            \"assertEq(int256,int256)\",\n            \"assertEq(int256,int256,string)\",\n            \"assertEq(address,address)\",\n            \"assertEq(address,address,string)\",\n            \"assertEq(bytes32,bytes32)\",\n            \"assertEq(bytes32,bytes32,string)\",\n            \"assertFalse(bool)\",\n            \"assertFalse(bool,string)\",\n            \"assertGeDecimal(uint256,uint256,uint256)\",\n            \"assertGeDecimal(uint256,uint256,uint256,string)\",\n            \"assertGeDecimal(int256,int256,uint256)\",\n            \"assertGeDecimal(int256,int256,uint256,string)\",\n            \"assertGe(uint256,uint256)\",\n            \"assertGe(uint256,uint256,string)\",\n            \"assertGe(int256,int256)\",\n            \"assertGe(int256,int256,string)\",\n            \"assertGtDecimal(uint256,uint256,uint256)\",\n            \"assertGtDecimal(uint256,uint256,uint256,string)\",\n            \"assertGtDecimal(int256,int256,uint256)\",\n            \"assertGtDecimal(int256,int256,uint256,string)\",\n            \"assertGt(uint256,uint256)\",\n            \"assertGt(uint256,uint256,string)\",\n            \"assertGt(int256,int256)\",\n            \"assertGt(int256,int256,string)\",\n            \"assertLeDecimal(uint256,uint256,uint256)\",\n            \"assertLeDecimal(uint256,uint256,uint256,string)\",\n            \"assertLeDecimal(int256,int256,uint256)\",\n            \"assertLeDecimal(int256,int256,uint256,string)\",\n            \"assertLe(uint256,uint256)\",\n            \"assertLe(uint256,uint256,string)\",\n            \"assertLe(int256,int256)\",\n            \"assertLe(int256,int256,string)\",\n            \"assertLtDecimal(uint256,uint256,uint256)\",\n            \"assertLtDecimal(uint256,uint256,uint256,string)\",\n            \"assertLtDecimal(int256,int256,uint256)\",\n            \"assertLtDecimal(int256,int256,uint256,string)\",\n            \"assertLt(uint256,uint256)\",\n            \"assertLt(uint256,uint256,string)\",\n            \"assertLt(int256,int256)\",\n            \"assertLt(int256,int256,string)\",\n            \"assertNotEqDecimal(uint256,uint256,uint256)\",\n            \"assertNotEqDecimal(uint256,uint256,uint256,string)\",\n            \"assertNotEqDecimal(int256,int256,uint256)\",\n            \"assertNotEqDecimal(int256,int256,uint256,string)\",\n            \"assertNotEq(bool,bool)\",\n            \"assertNotEq(bool,bool,string)\",\n            \"assertNotEq(string,string)\",\n            \"assertNotEq(string,string,string)\",\n            \"assertNotEq(bytes,bytes)\",\n            \"assertNotEq(bytes,bytes,string)\",\n            \"assertNotEq(bool[],bool[])\",\n            \"assertNotEq(bool[],bool[],string)\",\n            \"assertNotEq(uint256[],uint256[])\",\n            \"assertNotEq(uint256[],uint256[],string)\",\n            \"assertNotEq(int256[],int256[])\",\n            \"assertNotEq(int256[],int256[],string)\",\n            \"assertNotEq(uint256,uint256)\",\n            \"assertNotEq(address[],address[])\",\n            \"assertNotEq(address[],address[],string)\",\n            \"assertNotEq(bytes32[],bytes32[])\",\n            \"assertNotEq(bytes32[],bytes32[],string)\",\n            \"assertNotEq(string[],string[])\",\n            \"assertNotEq(string[],string[],string)\",\n            \"assertNotEq(bytes[],bytes[])\",\n            \"assertNotEq(bytes[],bytes[],string)\",\n            \"assertNotEq(uint256,uint256,string)\",\n            \"assertNotEq(int256,int256)\",\n            \"assertNotEq(int256,int256,string)\",\n            \"assertNotEq(address,address)\",\n            \"assertNotEq(address,address,string)\",\n            \"assertNotEq(bytes32,bytes32)\",\n            \"assertNotEq(bytes32,bytes32,string)\",\n            \"assertTrue(bool)\",\n            \"assertTrue(bool,string)\",\n            \"assume(bool)\",\n            \"assumeNoRevert()\",\n            \"assumeNoRevert((address,bool,bytes))\",\n            \"assumeNoRevert((address,bool,bytes)[])\",\n            \"breakpoint(string)\",\n            \"breakpoint(string,bool)\",\n            \"getFoundryVersion()\",\n            \"rpcUrl(string)\",\n            \"rpcUrlStructs()\",\n            \"rpcUrls()\",\n            \"keyExistsToml(string,string)\",\n            \"parseTomlAddress(string,string)\",\n            \"parseTomlAddressArray(string,string)\",\n            \"parseTomlBool(string,string)\",\n            \"parseTomlBoolArray(string,string)\",\n            \"parseTomlBytes(string,string)\",\n            \"parseTomlBytes32(string,string)\",\n            \"parseTomlBytes32Array(string,string)\",\n            \"parseTomlBytesArray(string,string)\",\n            \"parseTomlInt(string,string)\",\n            \"parseTomlIntArray(string,string)\",\n            \"parseTomlKeys(string,string)\",\n            \"parseTomlString(string,string)\",\n            \"parseTomlStringArray(string,string)\",\n            \"parseTomlTypeArray(string,string,string)\",\n            \"parseTomlType(string,string)\",\n            \"parseTomlType(string,string,string)\",\n            \"parseTomlUint(string,string)\",\n            \"parseTomlUintArray(string,string)\",\n            \"parseToml(string)\",\n            \"parseToml(string,string)\",\n            \"computeCreate2Address(bytes32,bytes32,address)\",\n            \"computeCreate2Address(bytes32,bytes32)\",\n            \"computeCreateAddress(address,uint256)\",\n            \"ensNamehash(string)\",\n            \"getLabel(address)\",\n            \"pauseTracing()\",\n            \"randomBool()\",\n            \"randomBytes(uint256)\",\n            \"randomBytes4()\",\n            \"randomBytes8()\",\n            \"randomInt()\",\n            \"randomInt(uint256)\",\n            \"randomUint(uint256)\",\n            \"resumeTracing()\",\n            \"toBase64URL(bytes)\",\n            \"toBase64URL(string)\",\n            \"toBase64(bytes)\",\n            \"toBase64(string)\"\n        ],\n        \"Vm\": [\n            \"deriveKey(string,uint32)\",\n            \"deriveKey(string,string,uint32)\",\n            \"deriveKey(string,uint32,string)\",\n            \"deriveKey(string,string,uint32,string)\",\n            \"publicKeyP256(uint256)\",\n            \"signCompact(uint256,bytes32)\",\n            \"signCompact(bytes32)\",\n            \"signCompact(address,bytes32)\",\n            \"signP256(uint256,bytes32)\",\n            \"sign(uint256,bytes32)\",\n            \"sign(bytes32)\",\n            \"sign(address,bytes32)\",\n            \"envAddress(string)\",\n            \"envAddress(string,string)\",\n            \"envBool(string)\",\n            \"envBool(string,string)\",\n            \"envBytes32(string)\",\n            \"envBytes32(string,string)\",\n            \"envBytes(string)\",\n            \"envBytes(string,string)\",\n            \"envExists(string)\",\n            \"envInt(string)\",\n            \"envInt(string,string)\",\n            \"envOr(string,bool)\",\n            \"envOr(string,uint256)\",\n            \"envOr(string,string,address[])\",\n            \"envOr(string,string,bytes32[])\",\n            \"envOr(string,string,string[])\",\n            \"envOr(string,string,bytes[])\",\n            \"envOr(string,int256)\",\n            \"envOr(string,address)\",\n            \"envOr(string,bytes32)\",\n            \"envOr(string,string)\",\n            \"envOr(string,bytes)\",\n            \"envOr(string,string,bool[])\",\n            \"envOr(string,string,uint256[])\",\n            \"envOr(string,string,int256[])\",\n            \"envString(string)\",\n            \"envString(string,string)\",\n            \"envUint(string)\",\n            \"envUint(string,string)\",\n            \"isContext(uint8)\",\n            \"addr(uint256)\",\n            \"getBlobBaseFee()\",\n            \"getBlockNumber()\",\n            \"getBlockTimestamp()\",\n            \"getNonce(address)\",\n            \"getStateDiff()\",\n            \"getStateDiffJson()\",\n            \"lastCallGas()\",\n            \"load(address,bytes32)\",\n            \"exists(string)\",\n            \"fsMetadata(string)\",\n            \"getArtifactPathByCode(bytes)\",\n            \"getArtifactPathByDeployedCode(bytes)\",\n            \"getBroadcast(string,uint64,uint8)\",\n            \"getBroadcasts(string,uint64,uint8)\",\n            \"getBroadcasts(string,uint64)\",\n            \"getCode(string)\",\n            \"getDeployedCode(string)\",\n            \"getDeployment(string)\",\n            \"getDeployment(string,uint64)\",\n            \"getDeployments(string,uint64)\",\n            \"isDir(string)\",\n            \"isFile(string)\",\n            \"projectRoot()\",\n            \"readDir(string)\",\n            \"readDir(string,uint64)\",\n            \"readDir(string,uint64,bool)\",\n            \"readFile(string)\",\n            \"readFileBinary(string)\",\n            \"readLine(string)\",\n            \"readLink(string)\",\n            \"unixTime()\",\n            \"keyExistsJson(string,string)\",\n            \"parseJsonAddress(string,string)\",\n            \"parseJsonAddressArray(string,string)\",\n            \"parseJsonBool(string,string)\",\n            \"parseJsonBoolArray(string,string)\",\n            \"parseJsonBytes(string,string)\",\n            \"parseJsonBytes32(string,string)\",\n            \"parseJsonBytes32Array(string,string)\",\n            \"parseJsonBytesArray(string,string)\",\n            \"parseJsonInt(string,string)\",\n            \"parseJsonIntArray(string,string)\",\n            \"parseJsonKeys(string,string)\",\n            \"parseJsonString(string,string)\",\n            \"parseJsonStringArray(string,string)\",\n            \"parseJsonTypeArray(string,string,string)\",\n            \"parseJsonType(string,string)\",\n            \"parseJsonType(string,string,string)\",\n            \"parseJsonUint(string,string)\",\n            \"parseJsonUintArray(string,string)\",\n            \"parseJson(string)\",\n            \"parseJson(string,string)\",\n            \"serializeJsonType(string,bytes)\",\n            \"keyExists(string,string)\",\n            \"indexOf(string,string)\",\n            \"parseAddress(string)\",\n            \"parseBool(string)\",\n            \"parseBytes(string)\",\n            \"parseBytes32(string)\",\n            \"parseInt(string)\",\n            \"parseUint(string)\",\n            \"replace(string,string,string)\",\n            \"split(string,string)\",\n            \"toLowercase(string)\",\n            \"toString(address)\",\n            \"toString(bytes)\",\n            \"toString(bytes32)\",\n            \"toString(bool)\",\n            \"toString(uint256)\",\n            \"toString(int256)\",\n            \"toUppercase(string)\",\n            \"trim(string)\",\n            \"assertApproxEqAbsDecimal(uint256,uint256,uint256,uint256)\",\n            \"assertApproxEqAbsDecimal(uint256,uint256,uint256,uint256,string)\",\n            \"assertApproxEqAbsDecimal(int256,int256,uint256,uint256)\",\n            \"assertApproxEqAbsDecimal(int256,int256,uint256,uint256,string)\",\n            \"assertApproxEqAbs(uint256,uint256,uint256)\",\n            \"assertApproxEqAbs(uint256,uint256,uint256,string)\",\n            \"assertApproxEqAbs(int256,int256,uint256)\",\n            \"assertApproxEqAbs(int256,int256,uint256,string)\",\n            \"assertApproxEqRelDecimal(uint256,uint256,uint256,uint256)\",\n            \"assertApproxEqRelDecimal(uint256,uint256,uint256,uint256,string)\",\n            \"assertApproxEqRelDecimal(int256,int256,uint256,uint256)\",\n            \"assertApproxEqRelDecimal(int256,int256,uint256,uint256,string)\",\n            \"assertApproxEqRel(uint256,uint256,uint256)\",\n            \"assertApproxEqRel(uint256,uint256,uint256,string)\",\n            \"assertApproxEqRel(int256,int256,uint256)\",\n            \"assertApproxEqRel(int256,int256,uint256,string)\",\n            \"assertEqDecimal(uint256,uint256,uint256)\",\n            \"assertEqDecimal(uint256,uint256,uint256,string)\",\n            \"assertEqDecimal(int256,int256,uint256)\",\n            \"assertEqDecimal(int256,int256,uint256,string)\",\n            \"assertEq(bool,bool)\",\n            \"assertEq(bool,bool,string)\",\n            \"assertEq(string,string)\",\n            \"assertEq(string,string,string)\",\n            \"assertEq(bytes,bytes)\",\n            \"assertEq(bytes,bytes,string)\",\n            \"assertEq(bool[],bool[])\",\n            \"assertEq(bool[],bool[],string)\",\n            \"assertEq(uint256[],uint256[])\",\n            \"assertEq(uint256[],uint256[],string)\",\n            \"assertEq(int256[],int256[])\",\n            \"assertEq(int256[],int256[],string)\",\n            \"assertEq(uint256,uint256)\",\n            \"assertEq(address[],address[])\",\n            \"assertEq(address[],address[],string)\",\n            \"assertEq(bytes32[],bytes32[])\",\n            \"assertEq(bytes32[],bytes32[],string)\",\n            \"assertEq(string[],string[])\",\n            \"assertEq(string[],string[],string)\",\n            \"assertEq(bytes[],bytes[])\",\n            \"assertEq(bytes[],bytes[],string)\",\n            \"assertEq(uint256,uint256,string)\",\n            \"assertEq(int256,int256)\",\n            \"assertEq(int256,int256,string)\",\n            \"assertEq(address,address)\",\n            \"assertEq(address,address,string)\",\n            \"assertEq(bytes32,bytes32)\",\n            \"assertEq(bytes32,bytes32,string)\",\n            \"assertFalse(bool)\",\n            \"assertFalse(bool,string)\",\n            \"assertGeDecimal(uint256,uint256,uint256)\",\n            \"assertGeDecimal(uint256,uint256,uint256,string)\",\n            \"assertGeDecimal(int256,int256,uint256)\",\n            \"assertGeDecimal(int256,int256,uint256,string)\",\n            \"assertGe(uint256,uint256)\",\n            \"assertGe(uint256,uint256,string)\",\n            \"assertGe(int256,int256)\",\n            \"assertGe(int256,int256,string)\",\n            \"assertGtDecimal(uint256,uint256,uint256)\",\n            \"assertGtDecimal(uint256,uint256,uint256,string)\",\n            \"assertGtDecimal(int256,int256,uint256)\",\n            \"assertGtDecimal(int256,int256,uint256,string)\",\n            \"assertGt(uint256,uint256)\",\n            \"assertGt(uint256,uint256,string)\",\n            \"assertGt(int256,int256)\",\n            \"assertGt(int256,int256,string)\",\n            \"assertLeDecimal(uint256,uint256,uint256)\",\n            \"assertLeDecimal(uint256,uint256,uint256,string)\",\n            \"assertLeDecimal(int256,int256,uint256)\",\n            \"assertLeDecimal(int256,int256,uint256,string)\",\n            \"assertLe(uint256,uint256)\",\n            \"assertLe(uint256,uint256,string)\",\n            \"assertLe(int256,int256)\",\n            \"assertLe(int256,int256,string)\",\n            \"assertLtDecimal(uint256,uint256,uint256)\",\n            \"assertLtDecimal(uint256,uint256,uint256,string)\",\n            \"assertLtDecimal(int256,int256,uint256)\",\n            \"assertLtDecimal(int256,int256,uint256,string)\",\n            \"assertLt(uint256,uint256)\",\n            \"assertLt(uint256,uint256,string)\",\n            \"assertLt(int256,int256)\",\n            \"assertLt(int256,int256,string)\",\n            \"assertNotEqDecimal(uint256,uint256,uint256)\",\n            \"assertNotEqDecimal(uint256,uint256,uint256,string)\",\n            \"assertNotEqDecimal(int256,int256,uint256)\",\n            \"assertNotEqDecimal(int256,int256,uint256,string)\",\n            \"assertNotEq(bool,bool)\",\n            \"assertNotEq(bool,bool,string)\",\n            \"assertNotEq(string,string)\",\n            \"assertNotEq(string,string,string)\",\n            \"assertNotEq(bytes,bytes)\",\n            \"assertNotEq(bytes,bytes,string)\",\n            \"assertNotEq(bool[],bool[])\",\n            \"assertNotEq(bool[],bool[],string)\",\n            \"assertNotEq(uint256[],uint256[])\",\n            \"assertNotEq(uint256[],uint256[],string)\",\n            \"assertNotEq(int256[],int256[])\",\n            \"assertNotEq(int256[],int256[],string)\",\n            \"assertNotEq(uint256,uint256)\",\n            \"assertNotEq(address[],address[])\",\n            \"assertNotEq(address[],address[],string)\",\n            \"assertNotEq(bytes32[],bytes32[])\",\n            \"assertNotEq(bytes32[],bytes32[],string)\",\n            \"assertNotEq(string[],string[])\",\n            \"assertNotEq(string[],string[],string)\",\n            \"assertNotEq(bytes[],bytes[])\",\n            \"assertNotEq(bytes[],bytes[],string)\",\n            \"assertNotEq(uint256,uint256,string)\",\n            \"assertNotEq(int256,int256)\",\n            \"assertNotEq(int256,int256,string)\",\n            \"assertNotEq(address,address)\",\n            \"assertNotEq(address,address,string)\",\n            \"assertNotEq(bytes32,bytes32)\",\n            \"assertNotEq(bytes32,bytes32,string)\",\n            \"assertTrue(bool)\",\n            \"assertTrue(bool,string)\",\n            \"assume(bool)\",\n            \"assumeNoRevert()\",\n            \"assumeNoRevert((address,bool,bytes))\",\n            \"assumeNoRevert((address,bool,bytes)[])\",\n            \"breakpoint(string)\",\n            \"breakpoint(string,bool)\",\n            \"getFoundryVersion()\",\n            \"rpcUrl(string)\",\n            \"rpcUrlStructs()\",\n            \"rpcUrls()\",\n            \"keyExistsToml(string,string)\",\n            \"parseTomlAddress(string,string)\",\n            \"parseTomlAddressArray(string,string)\",\n            \"parseTomlBool(string,string)\",\n            \"parseTomlBoolArray(string,string)\",\n            \"parseTomlBytes(string,string)\",\n            \"parseTomlBytes32(string,string)\",\n            \"parseTomlBytes32Array(string,string)\",\n            \"parseTomlBytesArray(string,string)\",\n            \"parseTomlInt(string,string)\",\n            \"parseTomlIntArray(string,string)\",\n            \"parseTomlKeys(string,string)\",\n            \"parseTomlString(string,string)\",\n            \"parseTomlStringArray(string,string)\",\n            \"parseTomlTypeArray(string,string,string)\",\n            \"parseTomlType(string,string)\",\n            \"parseTomlType(string,string,string)\",\n            \"parseTomlUint(string,string)\",\n            \"parseTomlUintArray(string,string)\",\n            \"parseToml(string)\",\n            \"parseToml(string,string)\",\n            \"computeCreate2Address(bytes32,bytes32,address)\",\n            \"computeCreate2Address(bytes32,bytes32)\",\n            \"computeCreateAddress(address,uint256)\",\n            \"ensNamehash(string)\",\n            \"getLabel(address)\",\n            \"pauseTracing()\",\n            \"randomBool()\",\n            \"randomBytes(uint256)\",\n            \"randomBytes4()\",\n            \"randomBytes8()\",\n            \"randomInt()\",\n            \"randomInt(uint256)\",\n            \"randomUint(uint256)\",\n            \"resumeTracing()\",\n            \"toBase64URL(bytes)\",\n            \"toBase64URL(string)\",\n            \"toBase64(bytes)\",\n            \"toBase64(string)\",\n            \"activeFork()\",\n            \"getBlobhashes()\",\n            \"isPersistent(address)\"\n        ],\n        \"IMulticall3\": [\n            \"getBasefee()\",\n            \"getBlockHash(uint256)\",\n            \"getBlockNumber()\",\n            \"getChainId()\",\n            \"getCurrentBlockCoinbase()\",\n            \"getCurrentBlockDifficulty()\",\n            \"getCurrentBlockGasLimit()\",\n            \"getCurrentBlockTimestamp()\",\n            \"getEthBalance(address)\",\n            \"getLastBlockHash()\"\n        ],\n        \"Ownable\": [\n            \"owner()\"\n        ],\n        \"ERC20\": [\n            \"DOMAIN_SEPARATOR()\",\n            \"name()\",\n            \"symbol()\",\n            \"decimals()\",\n            \"totalSupply()\",\n            \"balanceOf(address)\",\n            \"allowance(address,address)\",\n            \"nonces(address)\"\n        ],\n        \"MockERC20\": [\n            \"DOMAIN_SEPARATOR()\",\n            \"name()\",\n            \"symbol()\",\n            \"decimals()\",\n            \"totalSupply()\",\n            \"balanceOf(address)\",\n            \"allowance(address,address)\",\n            \"nonces(address)\"\n        ],\n        \"CLFExample\": [\n            \"owner()\",\n            \"MIN_RATE()\",\n            \"PRECISION_HELPER()\",\n            \"s_rate()\",\n            \"s_unpaidWorkTime()\"\n        ],\n        \"BaseTests\": [\n            \"excludeArtifacts()\",\n            \"excludeContracts()\",\n            \"excludeSelectors()\",\n            \"excludeSenders()\",\n            \"targetArtifacts()\",\n            \"targetArtifactSelectors()\",\n            \"targetContracts()\",\n            \"targetSelectors()\",\n            \"targetSenders()\",\n            \"targetInterfaces()\",\n            \"failed()\",\n            \"calculationHelper()\",\n            \"IS_TEST()\",\n            \"s_example()\",\n            \"s_aggregator()\"\n        ],\n        \"CLFExampleTest\": [\n            \"calculationHelper()\",\n            \"excludeArtifacts()\",\n            \"excludeContracts()\",\n            \"excludeSelectors()\",\n            \"excludeSenders()\",\n            \"targetArtifacts()\",\n            \"targetArtifactSelectors()\",\n            \"targetContracts()\",\n            \"targetSelectors()\",\n            \"targetSenders()\",\n            \"targetInterfaces()\",\n            \"failed()\",\n            \"IS_TEST()\",\n            \"s_example()\",\n            \"s_aggregator()\"\n        ],\n        \"CryticToFoundry\": [\n            \"excludeArtifacts()\",\n            \"excludeContracts()\",\n            \"excludeSelectors()\",\n            \"excludeSenders()\",\n            \"targetArtifacts()\",\n            \"targetArtifactSelectors()\",\n            \"targetContracts()\",\n            \"targetSelectors()\",\n            \"targetSenders()\",\n            \"targetInterfaces()\",\n            \"failed()\",\n            \"test_crytic()\",\n            \"IS_TEST()\"\n        ]\n    },\n    \"constants_used\": {\n        \"MockOffchainAggregator\": {\n            \"constructor(uint8,int256)\": [\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"int192\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"95780971304118053647396689196894323976171195136475135\",\n                        \"type\": \"int192\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"updateAnswer(int256)\": [\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"updateMinAndMaxAnswers(int192,int192)\": [\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"int192\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"95780971304118053647396689196894323976171195136475135\",\n                        \"type\": \"int192\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"minAnswer is too low\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"minAnswer must be less than maxAnswer\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"maxAnswer is too high\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ]\n        },\n        \"MockV3Aggregator\": {\n            \"constructor(uint8,int256)\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"proposeAggregator(address)\": [\n                [\n                    {\n                        \"value\": \"Proposed aggregator cannot be current aggregator\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Proposed aggregator cannot be zero address\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"confirmAggregator(address)\": [\n                [\n                    {\n                        \"value\": \"Invalid proposed aggregator\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"description()\": [\n                [\n                    {\n                        \"value\": \"src/data-feeds/MockV3Aggregator.sol\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ]\n        },\n        \"FoundryAsserts\": {\n            \"failed()\": [\n                [\n                    {\n                        \"value\": \"failed\",\n                        \"type\": \"bytes32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"bytes32\"\n                    }\n                ]\n            ]\n        },\n        \"StdAssertions\": {\n            \"failed()\": [\n                [\n                    {\n                        \"value\": \"failed\",\n                        \"type\": \"bytes32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"bytes32\"\n                    }\n                ]\n            ]\n        },\n        \"Test\": {\n            \"failed()\": [\n                [\n                    {\n                        \"value\": \"failed\",\n                        \"type\": \"bytes32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"bytes32\"\n                    }\n                ]\n            ]\n        },\n        \"Ownable\": {\n            \"renounceOwnership()\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"transferOwnership(address)\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ]\n        },\n        \"ERC20\": {\n            \"approve(address,uint256)\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"transfer(address,uint256)\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"transferFrom(address,address,uint256)\": [\n                [\n                    {\n                        \"value\": \"115792089237316195423570985008687907853269984665640564039457584007913129639935\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\": [\n                [\n                    {\n                        \"value\": \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"PERMIT_DEADLINE_EXPIRED\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"INVALID_SIGNER\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"\\u0019\\u0001\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"DOMAIN_SEPARATOR()\": [\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ]\n        },\n        \"MockERC20\": {\n            \"approve(address,uint256)\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"transfer(address,uint256)\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"transferFrom(address,address,uint256)\": [\n                [\n                    {\n                        \"value\": \"115792089237316195423570985008687907853269984665640564039457584007913129639935\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ]\n            ],\n            \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\": [\n                [\n                    {\n                        \"value\": \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"PERMIT_DEADLINE_EXPIRED\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"INVALID_SIGNER\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"\\u0019\\u0001\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"DOMAIN_SEPARATOR()\": [\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"constructor(string,string,uint8)\": [\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"mint(address,uint256)\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"burn(address,uint256)\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ]\n        },\n        \"CLFExample\": {\n            \"renounceOwnership()\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"transferOwnership(address)\": [\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"constructor(address,address,address)\": [\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"startWork()\": [\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"endWork()\": [\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"setRate(uint256)\": [\n                [\n                    {\n                        \"value\": \"750000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"endContract()\": [\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"payEmployee()\": [\n                [\n                    {\n                        \"value\": \"3600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ]\n        },\n        \"BaseTests\": {\n            \"failed()\": [\n                [\n                    {\n                        \"value\": \"failed\",\n                        \"type\": \"bytes32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"bytes32\"\n                    }\n                ]\n            ],\n            \"setUp()\": [\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8\",\n                        \"type\": \"uint8\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"77\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"250000000000\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"TEST CONTRACT\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"sessionStarterHelper()\": [\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"sessionCloserHelper()\": [\n                [\n                    {\n                        \"value\": \"3600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"calculationHelper()\": [\n                [\n                    {\n                        \"value\": \"250000000000\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"250000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3600\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ]\n        },\n        \"CLFExampleTest\": {\n            \"setUp()\": [\n                [\n                    {\n                        \"value\": \"100000000000000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8\",\n                        \"type\": \"uint8\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"77\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"250000000000\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"TEST CONTRACT\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"sessionStarterHelper()\": [\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"sessionCloserHelper()\": [\n                [\n                    {\n                        \"value\": \"3600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"calculationHelper()\": [\n                [\n                    {\n                        \"value\": \"250000000000\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"250000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3600\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ],\n            \"failed()\": [\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"failed\",\n                        \"type\": \"bytes32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"bytes32\"\n                    }\n                ]\n            ],\n            \"test_workSessionRevert()\": [\n                [\n                    {\n                        \"value\": \"3071222780\",\n                        \"type\": \"bytes4\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"test_workSessionStart()\": [\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"test_workSessionEnd()\": [\n                [\n                    {\n                        \"value\": \"3600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"test_ownerCanPayTheUser()\": [\n                [\n                    {\n                        \"value\": \"Expected Amount To be Paid:\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Employee Balance After Payment:\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"77\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"3600\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"250000000000\",\n                        \"type\": \"int256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"250000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"2\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"log(string,uint256)\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ]\n        },\n        \"CryticTester\": {\n            \"add_new_asset(uint8)\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"TST\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Test Token\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"asset_approve(address,uint128)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"asset_mint(address,uint128)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"cLFExample_endContract()\": [\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"cLFExample_endContract\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"cLFExample_endWork()\": [\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"cLFExample_endWork\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"cLFExample_payEmployee()\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"cLFExample_renounceOwnership()\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"cLFExample_setRate(uint256)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"cLFExample_startWork()\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"cLFExample_transferOwnership(address)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"constructor()\": [\n                [\n                    {\n                        \"value\": \"2000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ]\n        },\n        \"CryticToFoundry\": {\n            \"failed()\": [\n                [\n                    {\n                        \"value\": \"failed\",\n                        \"type\": \"bytes32\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"address\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"bytes32\"\n                    }\n                ]\n            ],\n            \"add_new_asset(uint8)\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"TST\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Test Token\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"asset_approve(address,uint128)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"asset_mint(address,uint128)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"cLFExample_endContract()\": [\n                [\n                    {\n                        \"value\": \"cLFExample_endContract\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"cLFExample_endWork()\": [\n                [\n                    {\n                        \"value\": \"61678357398080765210293718086378416697372618187842506566286863523773954249005\",\n                        \"type\": \"Vm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"hevm cheat code\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"cLFExample_endWork\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"cLFExample_payEmployee()\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"cLFExample_renounceOwnership()\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"cLFExample_setRate(uint256)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"cLFExample_startWork()\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"cLFExample_transferOwnership(address)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"setUp()\": [\n                [\n                    {\n                        \"value\": \"2000000000\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"8\",\n                        \"type\": \"uint256\"\n                    }\n                ]\n            ]\n        },\n        \"TargetFunctions\": {\n            \"add_new_asset(uint8)\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"TST\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Test Token\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"asset_approve(address,uint128)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"asset_mint(address,uint128)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"cLFExample_endContract()\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"cLFExample_endContract\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"cLFExample_endWork()\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"cLFExample_endWork\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"cLFExample_payEmployee()\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"cLFExample_renounceOwnership()\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"cLFExample_setRate(uint256)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"cLFExample_startWork()\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"cLFExample_transferOwnership(address)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ]\n        },\n        \"CLFExampleTargets\": {\n            \"cLFExample_endContract()\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"cLFExample_endContract\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"cLFExample_endWork()\": [\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"cLFExample_endWork\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"cLFExample_payEmployee()\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"cLFExample_renounceOwnership()\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"cLFExample_setRate(uint256)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"cLFExample_startWork()\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ],\n            \"cLFExample_transferOwnership(address)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ]\n            ]\n        },\n        \"ManagersTargets\": {\n            \"add_new_asset(uint8)\": [\n                [\n                    {\n                        \"value\": \"True\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"1\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"TST\",\n                        \"type\": \"string\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"False\",\n                        \"type\": \"bool\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"Test Token\",\n                        \"type\": \"string\"\n                    }\n                ]\n            ],\n            \"asset_approve(address,uint128)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ],\n            \"asset_mint(address,uint128)\": [\n                [\n                    {\n                        \"value\": \"645326474426547203313410069153905908525362434349\",\n                        \"type\": \"IHevm\"\n                    }\n                ],\n                [\n                    {\n                        \"value\": \"0\",\n                        \"type\": \"address\"\n                    }\n                ]\n            ]\n        }\n    },\n    \"constants_used_in_binary\": {\n        \"MockOffchainAggregator\": {\n            \"constructor(uint8,int256)\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"updateAnswer(int256)\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"ERC20\": {\n            \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"MockERC20\": {\n            \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"CLFExample\": {\n            \"endContract()\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LESS_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"3600\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            },\n            \"payEmployee()\": {\n                \"BinaryType.EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.LESS_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.DIVISION\": [\n                    [\n                        {\n                            \"value\": \"3600\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"CLFExampleTest\": {\n            \"test_workSessionEnd()\": {\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"3600\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"CryticTester\": {\n            \"add_new_asset(uint8)\": {\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"CryticToFoundry\": {\n            \"add_new_asset(uint8)\": {\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"TargetFunctions\": {\n            \"add_new_asset(uint8)\": {\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        },\n        \"ManagersTargets\": {\n            \"add_new_asset(uint8)\": {\n                \"BinaryType.NOT_EQUAL\": [\n                    [\n                        {\n                            \"value\": \"0\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ],\n                \"BinaryType.ADDITION\": [\n                    [\n                        {\n                            \"value\": \"1\",\n                            \"type\": \"uint256\"\n                        }\n                    ]\n                ]\n            }\n        }\n    },\n    \"functions_relations\": {\n        \"AggregatorV3Interface\": {\n            \"decimals()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"description()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"version()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getRoundData(uint80)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"latestRoundData()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"MockOffchainAggregator\": {\n            \"constructor(uint8,int256)\": {\n                \"impacts\": [\n                    \"constructor(uint8,int256)\",\n                    \"updateAnswer(int256)\",\n                    \"updateRoundData(uint80,int256,uint256,uint256)\",\n                    \"getRoundData(uint80)\",\n                    \"latestRoundData()\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor(uint8,int256)\",\n                    \"updateAnswer(int256)\",\n                    \"updateRoundData(uint80,int256,uint256,uint256)\"\n                ]\n            },\n            \"updateAnswer(int256)\": {\n                \"impacts\": [\n                    \"constructor(uint8,int256)\",\n                    \"updateAnswer(int256)\",\n                    \"updateRoundData(uint80,int256,uint256,uint256)\",\n                    \"getRoundData(uint80)\",\n                    \"latestRoundData()\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor(uint8,int256)\",\n                    \"updateAnswer(int256)\",\n                    \"updateRoundData(uint80,int256,uint256,uint256)\"\n                ]\n            },\n            \"updateRoundData(uint80,int256,uint256,uint256)\": {\n                \"impacts\": [\n                    \"constructor(uint8,int256)\",\n                    \"updateAnswer(int256)\",\n                    \"updateRoundData(uint80,int256,uint256,uint256)\",\n                    \"getRoundData(uint80)\",\n                    \"latestRoundData()\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor(uint8,int256)\",\n                    \"updateAnswer(int256)\",\n                    \"updateRoundData(uint80,int256,uint256,uint256)\"\n                ]\n            },\n            \"getRoundData(uint80)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor(uint8,int256)\",\n                    \"updateAnswer(int256)\",\n                    \"updateRoundData(uint80,int256,uint256,uint256)\"\n                ]\n            },\n            \"latestRoundData()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor(uint8,int256)\",\n                    \"updateAnswer(int256)\",\n                    \"updateRoundData(uint80,int256,uint256,uint256)\"\n                ]\n            },\n            \"updateMinAndMaxAnswers(int192,int192)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"MockV3Aggregator\": {\n            \"version()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"constructor(uint8,int256)\": {\n                \"impacts\": [\n                    \"decimals()\",\n                    \"getAnswer(uint256)\",\n                    \"getRoundData(uint80)\",\n                    \"latestRoundData()\",\n                    \"getTimestamp(uint256)\",\n                    \"latestAnswer()\",\n                    \"latestTimestamp()\",\n                    \"latestRound()\",\n                    \"updateAnswer(int256)\",\n                    \"updateRoundData(uint80,int256,uint256,uint256)\",\n                    \"proposeAggregator(address)\",\n                    \"confirmAggregator(address)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"decimals()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor(uint8,int256)\",\n                    \"confirmAggregator(address)\"\n                ]\n            },\n            \"getAnswer(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor(uint8,int256)\",\n                    \"confirmAggregator(address)\"\n                ]\n            },\n            \"getRoundData(uint80)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor(uint8,int256)\",\n                    \"confirmAggregator(address)\"\n                ]\n            },\n            \"latestRoundData()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor(uint8,int256)\",\n                    \"confirmAggregator(address)\"\n                ]\n            },\n            \"getTimestamp(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor(uint8,int256)\",\n                    \"confirmAggregator(address)\"\n                ]\n            },\n            \"latestAnswer()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor(uint8,int256)\",\n                    \"confirmAggregator(address)\"\n                ]\n            },\n            \"latestTimestamp()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor(uint8,int256)\",\n                    \"confirmAggregator(address)\"\n                ]\n            },\n            \"latestRound()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor(uint8,int256)\",\n                    \"confirmAggregator(address)\"\n                ]\n            },\n            \"updateAnswer(int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor(uint8,int256)\",\n                    \"confirmAggregator(address)\"\n                ]\n            },\n            \"updateRoundData(uint80,int256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor(uint8,int256)\",\n                    \"confirmAggregator(address)\"\n                ]\n            },\n            \"proposeAggregator(address)\": {\n                \"impacts\": [\n                    \"confirmAggregator(address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor(uint8,int256)\",\n                    \"confirmAggregator(address)\"\n                ]\n            },\n            \"confirmAggregator(address)\": {\n                \"impacts\": [\n                    \"decimals()\",\n                    \"getAnswer(uint256)\",\n                    \"getRoundData(uint80)\",\n                    \"latestRoundData()\",\n                    \"getTimestamp(uint256)\",\n                    \"latestAnswer()\",\n                    \"latestTimestamp()\",\n                    \"latestRound()\",\n                    \"updateAnswer(int256)\",\n                    \"updateRoundData(uint80,int256,uint256,uint256)\",\n                    \"proposeAggregator(address)\",\n                    \"confirmAggregator(address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor(uint8,int256)\",\n                    \"proposeAggregator(address)\",\n                    \"confirmAggregator(address)\"\n                ]\n            },\n            \"description()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"AggregatorInterface\": {\n            \"latestAnswer()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"latestTimestamp()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"latestRound()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getAnswer(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getTimestamp(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"AggregatorV2V3Interface\": {\n            \"decimals()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"description()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"version()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getRoundData(uint80)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"latestRoundData()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"latestAnswer()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"latestTimestamp()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"latestRound()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getAnswer(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getTimestamp(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"Asserts\": {},\n        \"BaseProperties\": {},\n        \"BaseSetup\": {},\n        \"BaseTargetFunctions\": {},\n        \"CryticAsserts\": {},\n        \"FoundryAsserts\": {\n            \"excludeArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifactSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetInterfaces()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"failed()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"IHevm\": {\n            \"warp(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"roll(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assume(bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deal(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"load(address,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"store(address,bytes32,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"sign(uint256,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"addr(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"ffi(string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"prank(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startPrank(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopPrank()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createFork(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"selectFork(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"activeFork()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"label(address,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"etch(address,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"CommonBase\": {},\n        \"TestBase\": {},\n        \"ScriptBase\": {},\n        \"StdAssertions\": {\n            \"failed()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"StdChains\": {},\n        \"StdCheatsSafe\": {},\n        \"StdCheats\": {},\n        \"stdError\": {},\n        \"StdInvariant\": {\n            \"excludeArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifactSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetInterfaces()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"stdJson\": {},\n        \"stdMath\": {},\n        \"stdStorageSafe\": {},\n        \"stdStorage\": {},\n        \"StdStyle\": {},\n        \"stdToml\": {},\n        \"StdUtils\": {},\n        \"Test\": {\n            \"excludeArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifactSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetInterfaces()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"failed()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"VmSafe\": {\n            \"createWallet(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createWallet(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createWallet(uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deriveKey(string,uint32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deriveKey(string,string,uint32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deriveKey(string,uint32,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deriveKey(string,string,uint32,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"publicKeyP256(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rememberKey(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rememberKeys(string,string,uint32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rememberKeys(string,string,string,uint32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signCompact((address,uint256,uint256,uint256),bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signCompact(uint256,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signCompact(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signCompact(address,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signP256(uint256,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"sign((address,uint256,uint256,uint256),bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"sign(uint256,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"sign(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"sign(address,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envAddress(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envAddress(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBool(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBool(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBytes32(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBytes32(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBytes(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBytes(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envExists(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envInt(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envInt(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,bool[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,int256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envString(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envString(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envUint(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envUint(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"isContext(uint8)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setEnv(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"accesses(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"addr(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"eth_getLogs(uint256,uint256,address,bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBlobBaseFee()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBlockNumber()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBlockTimestamp()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getMappingKeyAndParentOf(address,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getMappingLength(address,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getMappingSlotAt(address,bytes32,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getNonce(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getNonce((address,uint256,uint256,uint256))\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getRecordedLogs()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getStateDiff()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getStateDiffJson()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"lastCallGas()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"load(address,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"pauseGasMetering()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"record()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"recordLogs()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"resetGasMetering()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"resumeGasMetering()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rpc(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rpc(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startDebugTraceRecording()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startMappingRecording()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startStateDiffRecording()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopAndReturnDebugTraceRecording()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopAndReturnStateDiff()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopMappingRecording()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"closeFile(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"copyFile(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createDir(string,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deployCode(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deployCode(string,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"exists(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"ffi(string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"fsMetadata(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getArtifactPathByCode(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getArtifactPathByDeployedCode(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBroadcast(string,uint64,uint8)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBroadcasts(string,uint64,uint8)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBroadcasts(string,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getCode(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getDeployedCode(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getDeployment(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getDeployment(string,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getDeployments(string,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"isDir(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"isFile(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"projectRoot()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"prompt(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"promptAddress(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"promptSecret(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"promptSecretUint(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"promptUint(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readDir(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readDir(string,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readDir(string,uint64,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readFile(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readFileBinary(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readLine(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readLink(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"removeDir(string,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"removeFile(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"tryFfi(string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"unixTime()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeFile(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeFileBinary(string,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeLine(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"keyExistsJson(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonAddress(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonAddressArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBool(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBoolArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBytes(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBytes32(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBytes32Array(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBytesArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonInt(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonIntArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonKeys(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonString(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonStringArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonTypeArray(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonType(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonType(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonUint(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonUintArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJson(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJson(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeAddress(string,string,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeAddress(string,string,address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBool(string,string,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBool(string,string,bool[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBytes32(string,string,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBytes32(string,string,bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBytes(string,string,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBytes(string,string,bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeInt(string,string,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeInt(string,string,int256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeJson(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeJsonType(string,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeJsonType(string,string,string,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeString(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeString(string,string,string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeUintToHex(string,string,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeUint(string,string,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeUint(string,string,uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeJson(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeJson(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"keyExists(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"attachDelegation((uint8,bytes32,bytes32,uint64,address))\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"broadcastRawTransaction(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"broadcast()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"broadcast(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"broadcast(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getWallets()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signAndAttachDelegation(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signDelegation(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startBroadcast()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startBroadcast(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startBroadcast(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopBroadcast()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"contains(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"indexOf(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseAddress(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseBool(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseBytes(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseBytes32(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseInt(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseUint(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"replace(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"split(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toLowercase(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toUppercase(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"trim(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbsDecimal(uint256,uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbsDecimal(uint256,uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbsDecimal(int256,int256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbsDecimal(int256,int256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbs(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbs(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbs(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbs(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRelDecimal(uint256,uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRelDecimal(uint256,uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRelDecimal(int256,int256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRelDecimal(int256,int256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRel(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRel(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRel(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRel(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEqDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEqDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEqDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEqDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bool,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bool,bool,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes,bytes,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bool[],bool[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bool[],bool[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(uint256[],uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(uint256[],uint256[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(int256[],int256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(int256[],int256[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(address[],address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(address[],address[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes32[],bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes32[],bytes32[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(string[],string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(string[],string[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes[],bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes[],bytes[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(address,address,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes32,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes32,bytes32,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertFalse(bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertFalse(bool,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGeDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGeDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGeDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGeDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGe(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGe(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGe(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGe(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGtDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGtDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGtDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGtDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGt(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGt(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGt(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGt(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLeDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLeDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLeDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLeDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLe(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLe(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLe(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLe(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLtDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLtDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLtDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLtDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLt(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLt(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLt(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLt(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEqDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEqDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEqDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEqDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bool,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bool,bool,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes,bytes,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bool[],bool[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bool[],bool[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(uint256[],uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(uint256[],uint256[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(int256[],int256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(int256[],int256[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(address[],address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(address[],address[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes32[],bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes32[],bytes32[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(string[],string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(string[],string[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes[],bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes[],bytes[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(address,address,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes32,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes32,bytes32,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertTrue(bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertTrue(bool,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assume(bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assumeNoRevert()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assumeNoRevert((address,bool,bytes))\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assumeNoRevert((address,bool,bytes)[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"breakpoint(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"breakpoint(string,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getFoundryVersion()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rpcUrl(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rpcUrlStructs()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rpcUrls()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"sleep(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"keyExistsToml(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlAddress(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlAddressArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBool(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBoolArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBytes(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBytes32(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBytes32Array(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBytesArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlInt(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlIntArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlKeys(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlString(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlStringArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlTypeArray(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlType(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlType(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlUint(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlUintArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseToml(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseToml(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeToml(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeToml(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"computeCreate2Address(bytes32,bytes32,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"computeCreate2Address(bytes32,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"computeCreateAddress(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"copyStorage(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"ensNamehash(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getLabel(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"label(address,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"pauseTracing()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomAddress()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomBool()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomBytes(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomBytes4()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomBytes8()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomInt()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomInt(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomUint()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomUint(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomUint(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"resumeTracing()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setArbitraryStorage(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toBase64URL(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toBase64URL(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toBase64(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toBase64(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"Vm\": {\n            \"createWallet(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createWallet(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createWallet(uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deriveKey(string,uint32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deriveKey(string,string,uint32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deriveKey(string,uint32,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deriveKey(string,string,uint32,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"publicKeyP256(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rememberKey(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rememberKeys(string,string,uint32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rememberKeys(string,string,string,uint32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signCompact((address,uint256,uint256,uint256),bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signCompact(uint256,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signCompact(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signCompact(address,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signP256(uint256,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"sign((address,uint256,uint256,uint256),bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"sign(uint256,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"sign(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"sign(address,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envAddress(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envAddress(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBool(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBool(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBytes32(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBytes32(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBytes(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envBytes(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envExists(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envInt(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envInt(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,bool[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envOr(string,string,int256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envString(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envString(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envUint(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"envUint(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"isContext(uint8)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setEnv(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"accesses(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"addr(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"eth_getLogs(uint256,uint256,address,bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBlobBaseFee()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBlockNumber()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBlockTimestamp()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getMappingKeyAndParentOf(address,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getMappingLength(address,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getMappingSlotAt(address,bytes32,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getNonce(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getNonce((address,uint256,uint256,uint256))\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getRecordedLogs()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getStateDiff()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getStateDiffJson()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"lastCallGas()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"load(address,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"pauseGasMetering()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"record()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"recordLogs()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"resetGasMetering()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"resumeGasMetering()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rpc(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rpc(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startDebugTraceRecording()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startMappingRecording()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startStateDiffRecording()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopAndReturnDebugTraceRecording()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopAndReturnStateDiff()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopMappingRecording()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"closeFile(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"copyFile(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createDir(string,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deployCode(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deployCode(string,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"exists(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"ffi(string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"fsMetadata(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getArtifactPathByCode(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getArtifactPathByDeployedCode(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBroadcast(string,uint64,uint8)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBroadcasts(string,uint64,uint8)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBroadcasts(string,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getCode(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getDeployedCode(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getDeployment(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getDeployment(string,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getDeployments(string,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"isDir(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"isFile(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"projectRoot()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"prompt(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"promptAddress(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"promptSecret(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"promptSecretUint(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"promptUint(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readDir(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readDir(string,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readDir(string,uint64,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readFile(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readFileBinary(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readLine(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readLink(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"removeDir(string,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"removeFile(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"tryFfi(string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"unixTime()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeFile(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeFileBinary(string,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeLine(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"keyExistsJson(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonAddress(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonAddressArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBool(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBoolArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBytes(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBytes32(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBytes32Array(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonBytesArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonInt(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonIntArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonKeys(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonString(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonStringArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonTypeArray(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonType(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonType(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonUint(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJsonUintArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJson(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseJson(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeAddress(string,string,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeAddress(string,string,address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBool(string,string,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBool(string,string,bool[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBytes32(string,string,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBytes32(string,string,bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBytes(string,string,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeBytes(string,string,bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeInt(string,string,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeInt(string,string,int256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeJson(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeJsonType(string,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeJsonType(string,string,string,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeString(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeString(string,string,string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeUintToHex(string,string,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeUint(string,string,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"serializeUint(string,string,uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeJson(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeJson(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"keyExists(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"attachDelegation((uint8,bytes32,bytes32,uint64,address))\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"broadcastRawTransaction(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"broadcast()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"broadcast(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"broadcast(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getWallets()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signAndAttachDelegation(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"signDelegation(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startBroadcast()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startBroadcast(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startBroadcast(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopBroadcast()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"contains(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"indexOf(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseAddress(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseBool(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseBytes(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseBytes32(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseInt(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseUint(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"replace(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"split(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toLowercase(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toString(int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toUppercase(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"trim(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbsDecimal(uint256,uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbsDecimal(uint256,uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbsDecimal(int256,int256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbsDecimal(int256,int256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbs(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbs(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbs(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqAbs(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRelDecimal(uint256,uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRelDecimal(uint256,uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRelDecimal(int256,int256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRelDecimal(int256,int256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRel(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRel(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRel(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertApproxEqRel(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEqDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEqDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEqDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEqDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bool,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bool,bool,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes,bytes,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bool[],bool[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bool[],bool[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(uint256[],uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(uint256[],uint256[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(int256[],int256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(int256[],int256[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(address[],address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(address[],address[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes32[],bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes32[],bytes32[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(string[],string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(string[],string[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes[],bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes[],bytes[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(address,address,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes32,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertEq(bytes32,bytes32,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertFalse(bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertFalse(bool,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGeDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGeDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGeDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGeDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGe(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGe(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGe(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGe(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGtDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGtDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGtDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGtDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGt(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGt(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGt(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertGt(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLeDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLeDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLeDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLeDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLe(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLe(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLe(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLe(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLtDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLtDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLtDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLtDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLt(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLt(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLt(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertLt(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEqDecimal(uint256,uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEqDecimal(uint256,uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEqDecimal(int256,int256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEqDecimal(int256,int256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bool,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bool,bool,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes,bytes,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bool[],bool[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bool[],bool[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(uint256[],uint256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(uint256[],uint256[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(int256[],int256[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(int256[],int256[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(address[],address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(address[],address[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes32[],bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes32[],bytes32[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(string[],string[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(string[],string[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes[],bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes[],bytes[],string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(uint256,uint256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(int256,int256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(int256,int256,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(address,address,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes32,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertNotEq(bytes32,bytes32,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertTrue(bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assertTrue(bool,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assume(bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assumeNoRevert()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assumeNoRevert((address,bool,bytes))\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"assumeNoRevert((address,bool,bytes)[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"breakpoint(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"breakpoint(string,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getFoundryVersion()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rpcUrl(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rpcUrlStructs()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rpcUrls()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"sleep(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"keyExistsToml(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlAddress(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlAddressArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBool(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBoolArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBytes(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBytes32(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBytes32Array(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlBytesArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlInt(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlIntArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlKeys(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlString(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlStringArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlTypeArray(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlType(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlType(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlUint(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseTomlUintArray(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseToml(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"parseToml(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeToml(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"writeToml(string,string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"computeCreate2Address(bytes32,bytes32,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"computeCreate2Address(bytes32,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"computeCreateAddress(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"copyStorage(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"ensNamehash(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getLabel(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"label(address,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"pauseTracing()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomAddress()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomBool()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomBytes(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomBytes4()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomBytes8()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomInt()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomInt(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomUint()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomUint(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"randomUint(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"resumeTracing()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setArbitraryStorage(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toBase64URL(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toBase64URL(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toBase64(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"toBase64(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"activeFork()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"allowCheatcodes(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"blobBaseFee(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"blobhashes(bytes32[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"chainId(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"clearMockedCalls()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"cloneAccount(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"coinbase(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createFork(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createFork(string,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createFork(string,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createSelectFork(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createSelectFork(string,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"createSelectFork(string,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deal(address,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deleteStateSnapshot(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deleteStateSnapshots()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"difficulty(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"dumpState(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"etch(address,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"fee(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBlobhashes()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"isPersistent(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"loadAllocs(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"makePersistent(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"makePersistent(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"makePersistent(address,address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"makePersistent(address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"mockCallRevert(address,bytes,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"mockCallRevert(address,uint256,bytes,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"mockCallRevert(address,bytes4,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"mockCallRevert(address,uint256,bytes4,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"mockCall(address,bytes,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"mockCall(address,uint256,bytes,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"mockCall(address,bytes4,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"mockCall(address,uint256,bytes4,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"mockCalls(address,bytes,bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"mockCalls(address,uint256,bytes,bytes[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"mockFunction(address,address,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"prank(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"prank(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"prank(address,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"prank(address,address,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"prevrandao(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"prevrandao(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"readCallers()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"resetNonce(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"revertToState(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"revertToStateAndDelete(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"revokePersistent(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"revokePersistent(address[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"roll(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rollFork(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rollFork(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rollFork(uint256,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"rollFork(uint256,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"selectFork(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setBlockhash(uint256,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setNonce(address,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setNonceUnsafe(address,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"snapshotGasLastCall(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"snapshotGasLastCall(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"snapshotState()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"snapshotValue(string,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"snapshotValue(string,string,uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startPrank(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startPrank(address,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startPrank(address,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startPrank(address,address,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startSnapshotGas(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"startSnapshotGas(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopPrank()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopSnapshotGas()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopSnapshotGas(string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopSnapshotGas(string,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"store(address,bytes32,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"transact(bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"transact(uint256,bytes32)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"txGasPrice(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"warp(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deleteSnapshot(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"deleteSnapshots()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"revertToAndDelete(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"revertTo(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"snapshot()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectCallMinGas(address,uint256,uint64,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectCallMinGas(address,uint256,uint64,bytes,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectCall(address,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectCall(address,bytes,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectCall(address,uint256,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectCall(address,uint256,bytes,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectCall(address,uint256,uint64,bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectCall(address,uint256,uint64,bytes,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectEmitAnonymous(bool,bool,bool,bool,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectEmitAnonymous(bool,bool,bool,bool,bool,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectEmitAnonymous()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectEmitAnonymous(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectEmit(bool,bool,bool,bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectEmit(bool,bool,bool,bool,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectEmit()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectEmit(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectEmit(bool,bool,bool,bool,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectEmit(bool,bool,bool,bool,address,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectEmit(uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectEmit(address,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectPartialRevert(bytes4)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectPartialRevert(bytes4,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectRevert()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectRevert(bytes4)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectRevert(bytes4,address,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectRevert(bytes,address,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectRevert(bytes)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectRevert(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectRevert(bytes4,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectRevert(bytes,address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectRevert(uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectRevert(bytes4,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectRevert(bytes,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectRevert(address,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectSafeMemory(uint64,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"expectSafeMemoryCall(uint64,uint64)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"skip(bool)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"skip(bool,string)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"stopExpectSafeMemory()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"console\": {},\n        \"IMulticall3\": {\n            \"aggregate((address,bytes)[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"aggregate3((address,bool,bytes)[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"aggregate3Value((address,bool,uint256,bytes)[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"blockAndAggregate((address,bytes)[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBasefee()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBlockHash(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getBlockNumber()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getChainId()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getCurrentBlockCoinbase()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getCurrentBlockDifficulty()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getCurrentBlockGasLimit()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getCurrentBlockTimestamp()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getEthBalance(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"getLastBlockHash()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"tryAggregate(bool,(address,bytes)[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"tryBlockAndAggregate(bool,(address,bytes)[])\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"safeconsole\": {},\n        \"Ownable\": {\n            \"owner()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"renounceOwnership()\",\n                    \"transferOwnership(address)\"\n                ]\n            },\n            \"renounceOwnership()\": {\n                \"impacts\": [\n                    \"owner()\",\n                    \"renounceOwnership()\",\n                    \"transferOwnership(address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"renounceOwnership()\",\n                    \"transferOwnership(address)\"\n                ]\n            },\n            \"transferOwnership(address)\": {\n                \"impacts\": [\n                    \"owner()\",\n                    \"renounceOwnership()\",\n                    \"transferOwnership(address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"renounceOwnership()\",\n                    \"transferOwnership(address)\"\n                ]\n            }\n        },\n        \"Context\": {},\n        \"ActorManager\": {},\n        \"AssetManager\": {},\n        \"EnumerableSet\": {},\n        \"ERC20\": {\n            \"approve(address,uint256)\": {\n                \"impacts\": [\n                    \"transferFrom(address,address,uint256)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"transfer(address,uint256)\": {\n                \"impacts\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\"\n                ]\n            },\n            \"transferFrom(address,address,uint256)\": {\n                \"impacts\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"approve(address,uint256)\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\"\n                ]\n            },\n            \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\": {\n                \"impacts\": [\n                    \"transferFrom(address,address,uint256)\",\n                    \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\"\n                ],\n                \"is_impacted_by\": [\n                    \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\"\n                ]\n            },\n            \"DOMAIN_SEPARATOR()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"MockERC20\": {\n            \"approve(address,uint256)\": {\n                \"impacts\": [\n                    \"transferFrom(address,address,uint256)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"transfer(address,uint256)\": {\n                \"impacts\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"mint(address,uint256)\",\n                    \"burn(address,uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"mint(address,uint256)\",\n                    \"burn(address,uint256)\"\n                ]\n            },\n            \"transferFrom(address,address,uint256)\": {\n                \"impacts\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"mint(address,uint256)\",\n                    \"burn(address,uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"approve(address,uint256)\",\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\",\n                    \"mint(address,uint256)\",\n                    \"burn(address,uint256)\"\n                ]\n            },\n            \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\": {\n                \"impacts\": [\n                    \"transferFrom(address,address,uint256)\",\n                    \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\"\n                ],\n                \"is_impacted_by\": [\n                    \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\",\n                    \"constructor(string,string,uint8)\"\n                ]\n            },\n            \"DOMAIN_SEPARATOR()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor(string,string,uint8)\"\n                ]\n            },\n            \"constructor(string,string,uint8)\": {\n                \"impacts\": [\n                    \"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\",\n                    \"DOMAIN_SEPARATOR()\",\n                    \"constructor(string,string,uint8)\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor(string,string,uint8)\"\n                ]\n            },\n            \"mint(address,uint256)\": {\n                \"impacts\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"mint(address,uint256)\",\n                    \"burn(address,uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"mint(address,uint256)\",\n                    \"burn(address,uint256)\"\n                ]\n            },\n            \"burn(address,uint256)\": {\n                \"impacts\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"mint(address,uint256)\",\n                    \"burn(address,uint256)\"\n                ],\n                \"is_impacted_by\": [\n                    \"transfer(address,uint256)\",\n                    \"transferFrom(address,address,uint256)\",\n                    \"mint(address,uint256)\",\n                    \"burn(address,uint256)\"\n                ]\n            }\n        },\n        \"Panic\": {},\n        \"Utils\": {},\n        \"CLFExample\": {\n            \"owner()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"renounceOwnership()\",\n                    \"transferOwnership(address)\",\n                    \"constructor(address,address,address)\"\n                ]\n            },\n            \"renounceOwnership()\": {\n                \"impacts\": [\n                    \"owner()\",\n                    \"renounceOwnership()\",\n                    \"transferOwnership(address)\",\n                    \"constructor(address,address,address)\",\n                    \"setRate(uint256)\",\n                    \"endContract()\",\n                    \"payEmployee()\"\n                ],\n                \"is_impacted_by\": [\n                    \"renounceOwnership()\",\n                    \"transferOwnership(address)\",\n                    \"constructor(address,address,address)\"\n                ]\n            },\n            \"transferOwnership(address)\": {\n                \"impacts\": [\n                    \"owner()\",\n                    \"renounceOwnership()\",\n                    \"transferOwnership(address)\",\n                    \"constructor(address,address,address)\",\n                    \"setRate(uint256)\",\n                    \"endContract()\",\n                    \"payEmployee()\"\n                ],\n                \"is_impacted_by\": [\n                    \"renounceOwnership()\",\n                    \"transferOwnership(address)\",\n                    \"constructor(address,address,address)\"\n                ]\n            },\n            \"()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"constructor(address,address,address)\": {\n                \"impacts\": [\n                    \"owner()\",\n                    \"renounceOwnership()\",\n                    \"transferOwnership(address)\",\n                    \"constructor(address,address,address)\",\n                    \"startWork()\",\n                    \"endWork()\",\n                    \"setRate(uint256)\",\n                    \"endContract()\",\n                    \"payEmployee()\"\n                ],\n                \"is_impacted_by\": [\n                    \"renounceOwnership()\",\n                    \"transferOwnership(address)\",\n                    \"constructor(address,address,address)\"\n                ]\n            },\n            \"startWork()\": {\n                \"impacts\": [\n                    \"startWork()\",\n                    \"endWork()\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor(address,address,address)\",\n                    \"startWork()\",\n                    \"endWork()\",\n                    \"endContract()\"\n                ]\n            },\n            \"endWork()\": {\n                \"impacts\": [\n                    \"startWork()\",\n                    \"endWork()\",\n                    \"endContract()\",\n                    \"payEmployee()\"\n                ],\n                \"is_impacted_by\": [\n                    \"constructor(address,address,address)\",\n                    \"startWork()\",\n                    \"endWork()\",\n                    \"endContract()\",\n                    \"payEmployee()\"\n                ]\n            },\n            \"setRate(uint256)\": {\n                \"impacts\": [\n                    \"setRate(uint256)\",\n                    \"endContract()\",\n                    \"payEmployee()\"\n                ],\n                \"is_impacted_by\": [\n                    \"renounceOwnership()\",\n                    \"transferOwnership(address)\",\n                    \"constructor(address,address,address)\",\n                    \"setRate(uint256)\"\n                ]\n            },\n            \"endContract()\": {\n                \"impacts\": [\n                    \"startWork()\",\n                    \"endWork()\",\n                    \"endContract()\",\n                    \"payEmployee()\"\n                ],\n                \"is_impacted_by\": [\n                    \"renounceOwnership()\",\n                    \"transferOwnership(address)\",\n                    \"constructor(address,address,address)\",\n                    \"endWork()\",\n                    \"setRate(uint256)\",\n                    \"endContract()\",\n                    \"payEmployee()\"\n                ]\n            },\n            \"payEmployee()\": {\n                \"impacts\": [\n                    \"endWork()\",\n                    \"endContract()\",\n                    \"payEmployee()\"\n                ],\n                \"is_impacted_by\": [\n                    \"renounceOwnership()\",\n                    \"transferOwnership(address)\",\n                    \"constructor(address,address,address)\",\n                    \"endWork()\",\n                    \"setRate(uint256)\",\n                    \"endContract()\",\n                    \"payEmployee()\"\n                ]\n            }\n        },\n        \"BaseTests\": {\n            \"excludeArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifactSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetInterfaces()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"failed()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"setUp()\": {\n                \"impacts\": [\n                    \"setUp()\",\n                    \"sessionStarterHelper()\",\n                    \"sessionCloserHelper()\",\n                    \"calculationHelper()\"\n                ],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"sessionStarterHelper()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"sessionCloserHelper()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"calculationHelper()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            }\n        },\n        \"CLFExampleTest\": {\n            \"setUp()\": {\n                \"impacts\": [\n                    \"setUp()\",\n                    \"sessionStarterHelper()\",\n                    \"sessionCloserHelper()\",\n                    \"calculationHelper()\",\n                    \"test_workSessionRevert()\",\n                    \"test_workSessionStart()\",\n                    \"test_workSessionEnd()\",\n                    \"test_ownerCanPayTheUser()\"\n                ],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"sessionStarterHelper()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"sessionCloserHelper()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"calculationHelper()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"excludeArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifactSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetInterfaces()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"failed()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"test_workSessionRevert()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_workSessionStart()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_workSessionEnd()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"test_ownerCanPayTheUser()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            }\n        },\n        \"BeforeAfter\": {},\n        \"CryticTester\": {\n            \"switchActor(uint256)\": {\n                \"impacts\": [\n                    \"asset_approve(address,uint128)\",\n                    \"cLFExample_endContract()\",\n                    \"cLFExample_endWork()\",\n                    \"cLFExample_payEmployee()\",\n                    \"cLFExample_renounceOwnership()\",\n                    \"cLFExample_startWork()\",\n                    \"constructor()\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"switch_asset(uint256)\": {\n                \"impacts\": [\n                    \"asset_approve(address,uint128)\",\n                    \"asset_mint(address,uint128)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"add_new_asset(uint8)\": {\n                \"impacts\": [\n                    \"asset_approve(address,uint128)\",\n                    \"asset_mint(address,uint128)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"asset_approve(address,uint128)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"switch_asset(uint256)\",\n                    \"add_new_asset(uint8)\"\n                ]\n            },\n            \"asset_mint(address,uint128)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switch_asset(uint256)\",\n                    \"add_new_asset(uint8)\"\n                ]\n            },\n            \"cLFExample_endContract()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"constructor()\"\n                ]\n            },\n            \"cLFExample_endWork()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"constructor()\"\n                ]\n            },\n            \"cLFExample_payEmployee()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"constructor()\"\n                ]\n            },\n            \"cLFExample_renounceOwnership()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"constructor()\"\n                ]\n            },\n            \"cLFExample_setRate(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor()\"\n                ]\n            },\n            \"cLFExample_startWork()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"constructor()\"\n                ]\n            },\n            \"cLFExample_transferOwnership(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"constructor()\"\n                ]\n            },\n            \"constructor()\": {\n                \"impacts\": [\n                    \"cLFExample_endContract()\",\n                    \"cLFExample_endWork()\",\n                    \"cLFExample_payEmployee()\",\n                    \"cLFExample_renounceOwnership()\",\n                    \"cLFExample_setRate(uint256)\",\n                    \"cLFExample_startWork()\",\n                    \"cLFExample_transferOwnership(address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\"\n                ]\n            }\n        },\n        \"CryticToFoundry\": {\n            \"excludeArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"excludeSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifacts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetArtifactSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetContracts()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSelectors()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetSenders()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"targetInterfaces()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"failed()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"switchActor(uint256)\": {\n                \"impacts\": [\n                    \"asset_approve(address,uint128)\",\n                    \"cLFExample_endContract()\",\n                    \"cLFExample_endWork()\",\n                    \"cLFExample_payEmployee()\",\n                    \"cLFExample_renounceOwnership()\",\n                    \"cLFExample_startWork()\",\n                    \"setUp()\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"switch_asset(uint256)\": {\n                \"impacts\": [\n                    \"asset_approve(address,uint128)\",\n                    \"asset_mint(address,uint128)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"add_new_asset(uint8)\": {\n                \"impacts\": [\n                    \"asset_approve(address,uint128)\",\n                    \"asset_mint(address,uint128)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"asset_approve(address,uint128)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"switch_asset(uint256)\",\n                    \"add_new_asset(uint8)\"\n                ]\n            },\n            \"asset_mint(address,uint128)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switch_asset(uint256)\",\n                    \"add_new_asset(uint8)\"\n                ]\n            },\n            \"cLFExample_endContract()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"setUp()\"\n                ]\n            },\n            \"cLFExample_endWork()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"setUp()\"\n                ]\n            },\n            \"cLFExample_payEmployee()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"setUp()\"\n                ]\n            },\n            \"cLFExample_renounceOwnership()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"setUp()\"\n                ]\n            },\n            \"cLFExample_setRate(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"cLFExample_startWork()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"setUp()\"\n                ]\n            },\n            \"cLFExample_transferOwnership(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"setUp()\"\n                ]\n            },\n            \"setUp()\": {\n                \"impacts\": [\n                    \"cLFExample_endContract()\",\n                    \"cLFExample_endWork()\",\n                    \"cLFExample_payEmployee()\",\n                    \"cLFExample_renounceOwnership()\",\n                    \"cLFExample_setRate(uint256)\",\n                    \"cLFExample_startWork()\",\n                    \"cLFExample_transferOwnership(address)\"\n                ],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\"\n                ]\n            },\n            \"test_crytic()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"Properties\": {},\n        \"Setup\": {},\n        \"TargetFunctions\": {\n            \"switchActor(uint256)\": {\n                \"impacts\": [\n                    \"asset_approve(address,uint128)\",\n                    \"cLFExample_endContract()\",\n                    \"cLFExample_endWork()\",\n                    \"cLFExample_payEmployee()\",\n                    \"cLFExample_renounceOwnership()\",\n                    \"cLFExample_startWork()\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"switch_asset(uint256)\": {\n                \"impacts\": [\n                    \"asset_approve(address,uint128)\",\n                    \"asset_mint(address,uint128)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"add_new_asset(uint8)\": {\n                \"impacts\": [\n                    \"asset_approve(address,uint128)\",\n                    \"asset_mint(address,uint128)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"asset_approve(address,uint128)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"switch_asset(uint256)\",\n                    \"add_new_asset(uint8)\"\n                ]\n            },\n            \"asset_mint(address,uint128)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switch_asset(uint256)\",\n                    \"add_new_asset(uint8)\"\n                ]\n            },\n            \"cLFExample_endContract()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\"\n                ]\n            },\n            \"cLFExample_endWork()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\"\n                ]\n            },\n            \"cLFExample_payEmployee()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\"\n                ]\n            },\n            \"cLFExample_renounceOwnership()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\"\n                ]\n            },\n            \"cLFExample_setRate(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"cLFExample_startWork()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\"\n                ]\n            },\n            \"cLFExample_transferOwnership(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"AdminTargets\": {},\n        \"CLFExampleTargets\": {\n            \"cLFExample_endContract()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"cLFExample_endWork()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"cLFExample_payEmployee()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"cLFExample_renounceOwnership()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"cLFExample_setRate(uint256)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"cLFExample_startWork()\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            },\n            \"cLFExample_transferOwnership(address)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": []\n            }\n        },\n        \"DoomsdayTargets\": {},\n        \"ManagersTargets\": {\n            \"switchActor(uint256)\": {\n                \"impacts\": [\n                    \"asset_approve(address,uint128)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"switch_asset(uint256)\": {\n                \"impacts\": [\n                    \"asset_approve(address,uint128)\",\n                    \"asset_mint(address,uint128)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"add_new_asset(uint8)\": {\n                \"impacts\": [\n                    \"asset_approve(address,uint128)\",\n                    \"asset_mint(address,uint128)\"\n                ],\n                \"is_impacted_by\": []\n            },\n            \"asset_approve(address,uint128)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switchActor(uint256)\",\n                    \"switch_asset(uint256)\",\n                    \"add_new_asset(uint8)\"\n                ]\n            },\n            \"asset_mint(address,uint128)\": {\n                \"impacts\": [],\n                \"is_impacted_by\": [\n                    \"switch_asset(uint256)\",\n                    \"add_new_asset(uint8)\"\n                ]\n            }\n        }\n    },\n    \"constructors\": {\n        \"MockOffchainAggregator\": \"constructor(uint8,int256)\",\n        \"MockV3Aggregator\": \"constructor(uint8,int256)\",\n        \"Ownable\": \"constructor(address)\",\n        \"ActorManager\": \"constructor()\",\n        \"ERC20\": \"constructor(string,string,uint8)\",\n        \"MockERC20\": \"constructor(string,string,uint8)\",\n        \"CLFExample\": \"constructor(address,address,address)\",\n        \"BeforeAfter\": \"constructor()\",\n        \"CryticTester\": \"constructor()\",\n        \"CryticToFoundry\": \"constructor()\",\n        \"Properties\": \"constructor()\",\n        \"Setup\": \"constructor()\",\n        \"TargetFunctions\": \"constructor()\",\n        \"AdminTargets\": \"constructor()\",\n        \"CLFExampleTargets\": \"constructor()\",\n        \"DoomsdayTargets\": \"constructor()\",\n        \"ManagersTargets\": \"constructor()\"\n    },\n    \"have_external_calls\": {\n        \"MockV3Aggregator\": [\n            \"latestTimestamp()\",\n            \"getRoundData(uint80)\",\n            \"latestAnswer()\",\n            \"latestRoundData()\",\n            \"updateAnswer(int256)\",\n            \"decimals()\",\n            \"updateRoundData(uint80,int256,uint256,uint256)\",\n            \"getTimestamp(uint256)\",\n            \"getAnswer(uint256)\",\n            \"latestRound()\"\n        ],\n        \"FoundryAsserts\": [\n            \"failed()\"\n        ],\n        \"StdAssertions\": [\n            \"failed()\"\n        ],\n        \"Test\": [\n            \"failed()\"\n        ],\n        \"CLFExample\": [\n            \"payEmployee()\",\n            \"endContract()\"\n        ],\n        \"BaseTests\": [\n            \"sessionCloserHelper()\",\n            \"failed()\",\n            \"calculationHelper()\",\n            \"sessionStarterHelper()\",\n            \"setUp()\"\n        ],\n        \"CLFExampleTest\": [\n            \"failed()\",\n            \"sessionCloserHelper()\",\n            \"test_workSessionStart()\",\n            \"calculationHelper()\",\n            \"sessionStarterHelper()\",\n            \"test_workSessionEnd()\",\n            \"test_workSessionRevert()\",\n            \"setUp()\",\n            \"test_ownerCanPayTheUser()\"\n        ],\n        \"CryticTester\": [\n            \"cLFExample_endContract()\",\n            \"add_new_asset(uint8)\",\n            \"cLFExample_transferOwnership(address)\",\n            \"switchActor(uint256)\",\n            \"cLFExample_renounceOwnership()\",\n            \"asset_approve(address,uint128)\",\n            \"switch_asset(uint256)\",\n            \"cLFExample_payEmployee()\",\n            \"cLFExample_setRate(uint256)\",\n            \"asset_mint(address,uint128)\",\n            \"cLFExample_endWork()\",\n            \"cLFExample_startWork()\"\n        ],\n        \"CryticToFoundry\": [\n            \"cLFExample_endContract()\",\n            \"failed()\",\n            \"add_new_asset(uint8)\",\n            \"cLFExample_transferOwnership(address)\",\n            \"switchActor(uint256)\",\n            \"cLFExample_renounceOwnership()\",\n            \"asset_approve(address,uint128)\",\n            \"switch_asset(uint256)\",\n            \"cLFExample_payEmployee()\",\n            \"cLFExample_setRate(uint256)\",\n            \"asset_mint(address,uint128)\",\n            \"cLFExample_endWork()\",\n            \"cLFExample_startWork()\"\n        ],\n        \"TargetFunctions\": [\n            \"cLFExample_endContract()\",\n            \"add_new_asset(uint8)\",\n            \"cLFExample_transferOwnership(address)\",\n            \"switchActor(uint256)\",\n            \"cLFExample_renounceOwnership()\",\n            \"asset_approve(address,uint128)\",\n            \"switch_asset(uint256)\",\n            \"cLFExample_payEmployee()\",\n            \"cLFExample_setRate(uint256)\",\n            \"asset_mint(address,uint128)\",\n            \"cLFExample_endWork()\",\n            \"cLFExample_startWork()\"\n        ],\n        \"CLFExampleTargets\": [\n            \"cLFExample_endContract()\",\n            \"cLFExample_transferOwnership(address)\",\n            \"cLFExample_setRate(uint256)\",\n            \"cLFExample_renounceOwnership()\",\n            \"cLFExample_payEmployee()\",\n            \"cLFExample_endWork()\",\n            \"cLFExample_startWork()\"\n        ],\n        \"ManagersTargets\": [\n            \"add_new_asset(uint8)\",\n            \"switchActor(uint256)\",\n            \"asset_approve(address,uint128)\",\n            \"switch_asset(uint256)\",\n            \"asset_mint(address,uint128)\"\n        ]\n    },\n    \"use_balance\": {\n        \"CLFExampleTest\": [\n            \"test_ownerCanPayTheUser()\"\n        ]\n    },\n    \"solc_versions\": [\n        \"0.8.26\"\n    ],\n    \"with_fallback\": [],\n    \"with_receive\": [\n        \"CLFExample\"\n    ]\n}", "first_markdown_element": "", "id": "3d02fbdf81120b084e5afb7351a2dbb7a67adbdabeff8986dd2d4c35aae5c053", "printer": "echidna"}]}}
